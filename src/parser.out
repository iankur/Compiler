Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT1
    COMMENT2
    COMMENT
    CONSTANT5
    CONSTANT4
    CONSTANT6
    CONSTANT1
    CONSTANT3
    CONSTANT2
    CONSTANT7

Grammar

Rule 0     S' -> translation_unit
Rule 1     translation_unit -> external_declaration
Rule 2     translation_unit -> translation_unit external_declaration
Rule 3     primary_expression -> IDENTIFIER
Rule 4     primary_expression -> CONSTANT
Rule 5     primary_expression -> STRING_LITERAL
Rule 6     primary_expression -> ( expression )
Rule 7     postfix_expression -> primary_expression
Rule 8     postfix_expression -> postfix_expression [ expression ]
Rule 9     postfix_expression -> postfix_expression ( )
Rule 10    postfix_expression -> postfix_expression ( argument_expression_list )
Rule 11    postfix_expression -> postfix_expression . IDENTIFIER
Rule 12    postfix_expression -> postfix_expression PTR_OP IDENTIFIER
Rule 13    postfix_expression -> postfix_expression INC_OP
Rule 14    postfix_expression -> postfix_expression DEC_OP
Rule 15    argument_expression_list -> assignment_expression
Rule 16    argument_expression_list -> argument_expression_list , assignment_expression
Rule 17    unary_expression -> postfix_expression
Rule 18    unary_expression -> INC_OP unary_expression
Rule 19    unary_expression -> DEC_OP unary_expression
Rule 20    unary_expression -> unary_operator cast_expression
Rule 21    unary_expression -> SIZEOF unary_expression
Rule 22    unary_expression -> SIZEOF ( type_name )
Rule 23    unary_operator -> &
Rule 24    unary_operator -> *
Rule 25    unary_operator -> +
Rule 26    unary_operator -> -
Rule 27    unary_operator -> ~
Rule 28    unary_operator -> !
Rule 29    cast_expression -> unary_expression
Rule 30    cast_expression -> ( type_name ) cast_expression
Rule 31    multiplicative_expression -> cast_expression
Rule 32    multiplicative_expression -> multiplicative_expression * cast_expression
Rule 33    multiplicative_expression -> multiplicative_expression / cast_expression
Rule 34    multiplicative_expression -> multiplicative_expression % cast_expression
Rule 35    additive_expression -> multiplicative_expression
Rule 36    additive_expression -> additive_expression + multiplicative_expression
Rule 37    additive_expression -> additive_expression - multiplicative_expression
Rule 38    shift_expression -> additive_expression
Rule 39    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 40    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 41    relational_expression -> shift_expression
Rule 42    relational_expression -> relational_expression < shift_expression
Rule 43    relational_expression -> relational_expression > shift_expression
Rule 44    relational_expression -> relational_expression LE_OP shift_expression
Rule 45    relational_expression -> relational_expression GE_OP shift_expression
Rule 46    equality_expression -> relational_expression
Rule 47    equality_expression -> equality_expression EQ_OP relational_expression
Rule 48    equality_expression -> equality_expression NE_OP relational_expression
Rule 49    and_expression -> equality_expression
Rule 50    and_expression -> and_expression & equality_expression
Rule 51    exclusive_or_expression -> and_expression
Rule 52    exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 53    inclusive_or_expression -> exclusive_or_expression
Rule 54    inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 55    logical_and_expression -> inclusive_or_expression
Rule 56    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 57    logical_or_expression -> logical_and_expression
Rule 58    logical_or_expression -> logical_or_expression OR_OP logical_and_expression
Rule 59    conditional_expression -> logical_or_expression
Rule 60    conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 61    assignment_expression -> conditional_expression
Rule 62    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 63    assignment_operator -> =
Rule 64    assignment_operator -> MUL_ASSIGN
Rule 65    assignment_operator -> DIV_ASSIGN
Rule 66    assignment_operator -> MOD_ASSIGN
Rule 67    assignment_operator -> ADD_ASSIGN
Rule 68    assignment_operator -> SUB_ASSIGN
Rule 69    assignment_operator -> LEFT_ASSIGN
Rule 70    assignment_operator -> RIGHT_ASSIGN
Rule 71    assignment_operator -> AND_ASSIGN
Rule 72    assignment_operator -> XOR_ASSIGN
Rule 73    assignment_operator -> OR_ASSIGN
Rule 74    expression -> assignment_expression
Rule 75    expression -> expression , assignment_expression
Rule 76    constant_expression -> conditional_expression
Rule 77    declaration -> declaration_specifiers ;
Rule 78    declaration -> declaration_specifiers init_declarator_list ;
Rule 79    declaration_specifiers -> storage_class_specifier
Rule 80    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 81    declaration_specifiers -> type_specifier
Rule 82    declaration_specifiers -> type_specifier declaration_specifiers
Rule 83    declaration_specifiers -> type_qualifier
Rule 84    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 85    init_declarator_list -> init_declarator
Rule 86    init_declarator_list -> init_declarator_list , init_declarator
Rule 87    init_declarator -> declarator
Rule 88    init_declarator -> declarator = initializer
Rule 89    storage_class_specifier -> TYPEDEF
Rule 90    storage_class_specifier -> EXTERN
Rule 91    storage_class_specifier -> STATIC
Rule 92    storage_class_specifier -> AUTO
Rule 93    storage_class_specifier -> REGISTER
Rule 94    type_specifier -> VOID
Rule 95    type_specifier -> CHAR
Rule 96    type_specifier -> SHORT
Rule 97    type_specifier -> INT
Rule 98    type_specifier -> LONG
Rule 99    type_specifier -> FLOAT
Rule 100   type_specifier -> DOUBLE
Rule 101   type_specifier -> SIGNED
Rule 102   type_specifier -> UNSIGNED
Rule 103   type_specifier -> struct_or_union_specifier
Rule 104   type_specifier -> enum_specifier
Rule 105   type_specifier -> TYPE_NAME
Rule 106   struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list }
Rule 107   struct_or_union_specifier -> struct_or_union { struct_declaration_list }
Rule 108   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 109   struct_or_union -> STRUCT
Rule 110   struct_or_union -> UNION
Rule 111   struct_declaration_list -> struct_declaration
Rule 112   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 113   struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 114   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 115   specifier_qualifier_list -> type_specifier
Rule 116   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 117   specifier_qualifier_list -> type_qualifier
Rule 118   struct_declarator_list -> struct_declarator
Rule 119   struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 120   struct_declarator -> declarator
Rule 121   struct_declarator -> : constant_expression
Rule 122   struct_declarator -> declarator : constant_expression
Rule 123   enum_specifier -> ENUM { enumerator_list }
Rule 124   enum_specifier -> ENUM IDENTIFIER { enumerator_list }
Rule 125   enum_specifier -> ENUM IDENTIFIER
Rule 126   enumerator_list -> enumerator
Rule 127   enumerator_list -> enumerator_list , enumerator
Rule 128   enumerator -> IDENTIFIER
Rule 129   enumerator -> IDENTIFIER = constant_expression
Rule 130   type_qualifier -> CONST
Rule 131   type_qualifier -> VOLATILE
Rule 132   declarator -> pointer direct_declarator
Rule 133   declarator -> direct_declarator
Rule 134   direct_declarator -> IDENTIFIER
Rule 135   direct_declarator -> ( declarator )
Rule 136   direct_declarator -> direct_declarator [ constant_expression ]
Rule 137   direct_declarator -> direct_declarator [ ]
Rule 138   direct_declarator -> direct_declarator ( parameter_type_list )
Rule 139   direct_declarator -> direct_declarator ( identifier_list )
Rule 140   direct_declarator -> direct_declarator ( )
Rule 141   pointer -> *
Rule 142   pointer -> * type_qualifier_list
Rule 143   pointer -> * pointer
Rule 144   pointer -> * type_qualifier_list pointer
Rule 145   type_qualifier_list -> type_qualifier
Rule 146   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 147   parameter_type_list -> parameter_list
Rule 148   parameter_type_list -> parameter_list , ELLIPSIS
Rule 149   parameter_list -> parameter_declaration
Rule 150   parameter_list -> parameter_list , parameter_declaration
Rule 151   parameter_declaration -> declaration_specifiers declarator
Rule 152   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 153   parameter_declaration -> declaration_specifiers
Rule 154   identifier_list -> IDENTIFIER
Rule 155   identifier_list -> identifier_list , IDENTIFIER
Rule 156   type_name -> specifier_qualifier_list
Rule 157   type_name -> specifier_qualifier_list abstract_declarator
Rule 158   abstract_declarator -> pointer
Rule 159   abstract_declarator -> direct_abstract_declarator
Rule 160   abstract_declarator -> pointer direct_abstract_declarator
Rule 161   direct_abstract_declarator -> ( abstract_declarator )
Rule 162   direct_abstract_declarator -> [ ]
Rule 163   direct_abstract_declarator -> [ constant_expression ]
Rule 164   direct_abstract_declarator -> direct_abstract_declarator [ ]
Rule 165   direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]
Rule 166   direct_abstract_declarator -> ( )
Rule 167   direct_abstract_declarator -> ( parameter_type_list )
Rule 168   direct_abstract_declarator -> direct_abstract_declarator ( )
Rule 169   direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list )
Rule 170   initializer -> assignment_expression
Rule 171   initializer -> { initializer_list }
Rule 172   initializer -> { initializer_list , }
Rule 173   initializer_list -> initializer
Rule 174   initializer_list -> initializer_list , initializer
Rule 175   statement -> labeled_statement
Rule 176   statement -> compound_statement
Rule 177   statement -> expression_statement
Rule 178   statement -> selection_statement
Rule 179   statement -> iteration_statement
Rule 180   statement -> jump_statement
Rule 181   labeled_statement -> IDENTIFIER : statement
Rule 182   labeled_statement -> CASE constant_expression : statement
Rule 183   labeled_statement -> DEFAULT : statement
Rule 184   compound_statement -> { }
Rule 185   compound_statement -> { statement_list }
Rule 186   compound_statement -> { declaration_list }
Rule 187   compound_statement -> { declaration_list statement_list }
Rule 188   declaration_list -> declaration
Rule 189   declaration_list -> declaration_list declaration
Rule 190   statement_list -> statement
Rule 191   statement_list -> statement_list statement
Rule 192   expression_statement -> ;
Rule 193   expression_statement -> expression ;
Rule 194   selection_statement -> IF ( expression ) statement
Rule 195   selection_statement -> IF ( expression ) statement ELSE statement
Rule 196   selection_statement -> SWITCH ( expression ) statement
Rule 197   iteration_statement -> WHILE ( expression ) statement
Rule 198   iteration_statement -> DO statement WHILE ( expression ) ;
Rule 199   iteration_statement -> FOR ( expression_statement expression_statement ) statement
Rule 200   iteration_statement -> FOR ( expression_statement expression_statement expression ) statement
Rule 201   jump_statement -> GOTO IDENTIFIER ;
Rule 202   jump_statement -> CONTINUE ;
Rule 203   jump_statement -> BREAK ;
Rule 204   jump_statement -> RETURN ;
Rule 205   jump_statement -> RETURN expression ;
Rule 206   external_declaration -> function_definition
Rule 207   external_declaration -> declaration
Rule 208   function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 209   function_definition -> declaration_specifiers declarator compound_statement
Rule 210   function_definition -> declarator declaration_list compound_statement
Rule 211   function_definition -> declarator compound_statement

Terminals, with rules where they appear

!                    : 28
%                    : 34
&                    : 23 50
(                    : 6 9 10 22 30 135 138 139 140 161 166 167 168 169 194 195 196 197 198 199 200
)                    : 6 9 10 22 30 135 138 139 140 161 166 167 168 169 194 195 196 197 198 199 200
*                    : 24 32 141 142 143 144
+                    : 25 36
,                    : 16 75 86 119 127 148 150 155 172 174
-                    : 26 37
.                    : 11
/                    : 33
:                    : 60 121 122 181 182 183
;                    : 77 78 113 192 193 198 201 202 203 204 205
<                    : 42
=                    : 63 88 129
>                    : 43
?                    : 60
ADD_ASSIGN           : 67
AND_ASSIGN           : 71
AND_OP               : 56
AUTO                 : 92
BREAK                : 203
CASE                 : 182
CHAR                 : 95
COMMENT              : 
COMMENT1             : 
COMMENT2             : 
CONST                : 130
CONSTANT             : 4
CONSTANT1            : 
CONSTANT2            : 
CONSTANT3            : 
CONSTANT4            : 
CONSTANT5            : 
CONSTANT6            : 
CONSTANT7            : 
CONTINUE             : 202
DEC_OP               : 14 19
DEFAULT              : 183
DIV_ASSIGN           : 65
DO                   : 198
DOUBLE               : 100
ELLIPSIS             : 148
ELSE                 : 195
ENUM                 : 123 124 125
EQ_OP                : 47
EXTERN               : 90
FLOAT                : 99
FOR                  : 199 200
GE_OP                : 45
GOTO                 : 201
IDENTIFIER           : 3 11 12 106 108 124 125 128 129 134 154 155 181 201
IF                   : 194 195
INC_OP               : 13 18
INT                  : 97
LEFT_ASSIGN          : 69
LEFT_OP              : 39
LE_OP                : 44
LONG                 : 98
MOD_ASSIGN           : 66
MUL_ASSIGN           : 64
NE_OP                : 48
OR_ASSIGN            : 73
OR_OP                : 58
PTR_OP               : 12
REGISTER             : 93
RETURN               : 204 205
RIGHT_ASSIGN         : 70
RIGHT_OP             : 40
SHORT                : 96
SIGNED               : 101
SIZEOF               : 21 22
STATIC               : 91
STRING_LITERAL       : 5
STRUCT               : 109
SUB_ASSIGN           : 68
SWITCH               : 196
TYPEDEF              : 89
TYPE_NAME            : 105
UNION                : 110
UNSIGNED             : 102
VOID                 : 94
VOLATILE             : 131
WHILE                : 197 198
XOR_ASSIGN           : 72
[                    : 8 136 137 162 163 164 165
]                    : 8 136 137 162 163 164 165
^                    : 52
error                : 
{                    : 106 107 123 124 171 172 184 185 186 187
|                    : 54
}                    : 106 107 123 124 171 172 184 185 186 187
~                    : 27

Nonterminals, with rules where they appear

abstract_declarator  : 152 157 161
additive_expression  : 36 37 38 39 40
and_expression       : 50 51 52
argument_expression_list : 10 16
assignment_expression : 15 16 62 74 75 170
assignment_operator  : 62
cast_expression      : 20 30 31 32 33 34
compound_statement   : 176 208 209 210 211
conditional_expression : 60 61 76
constant_expression  : 121 122 129 136 163 165 182
declaration          : 188 189 207
declaration_list     : 186 187 189 208 210
declaration_specifiers : 77 78 80 82 84 151 152 153 208 209
declarator           : 87 88 120 122 135 151 208 209 210 211
direct_abstract_declarator : 159 160 164 165 168 169
direct_declarator    : 132 133 136 137 138 139 140
enum_specifier       : 104
enumerator           : 126 127
enumerator_list      : 123 124 127
equality_expression  : 47 48 49 50
exclusive_or_expression : 52 53 54
expression           : 6 8 60 75 193 194 195 196 197 198 200 205
expression_statement : 177 199 199 200 200
external_declaration : 1 2
function_definition  : 206
identifier_list      : 139 155
inclusive_or_expression : 54 55 56
init_declarator      : 85 86
init_declarator_list : 78 86
initializer          : 88 173 174
initializer_list     : 171 172 174
iteration_statement  : 179
jump_statement       : 180
labeled_statement    : 175
logical_and_expression : 56 57 58
logical_or_expression : 58 59 60
multiplicative_expression : 32 33 34 35 36 37
parameter_declaration : 149 150
parameter_list       : 147 148 150
parameter_type_list  : 138 167 169
pointer              : 132 143 144 158 160
postfix_expression   : 8 9 10 11 12 13 14 17
primary_expression   : 7
relational_expression : 42 43 44 45 46 47 48
selection_statement  : 178
shift_expression     : 39 40 41 42 43 44 45
specifier_qualifier_list : 113 114 116 156 157
statement            : 181 182 183 190 191 194 195 195 196 197 198 199 200
statement_list       : 185 187 191
storage_class_specifier : 79 80
struct_declaration   : 111 112
struct_declaration_list : 106 107 112
struct_declarator    : 118 119
struct_declarator_list : 113 119
struct_or_union      : 106 107 108
struct_or_union_specifier : 103
translation_unit     : 2 0
type_name            : 22 30
type_qualifier       : 83 84 116 117 145 146
type_qualifier_list  : 142 144 146
type_specifier       : 81 82 114 115
unary_expression     : 18 19 21 29 62
unary_operator       : 20

Parsing method: LALR

state 0

    (0) S' -> . translation_unit
    (1) translation_unit -> . external_declaration
    (2) translation_unit -> . translation_unit external_declaration
    (206) external_declaration -> . function_definition
    (207) external_declaration -> . declaration
    (208) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (209) function_definition -> . declaration_specifiers declarator compound_statement
    (210) function_definition -> . declarator declaration_list compound_statement
    (211) function_definition -> . declarator compound_statement
    (77) declaration -> . declaration_specifiers ;
    (78) declaration -> . declaration_specifiers init_declarator_list ;
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 14
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 4
    pointer                        shift and go to state 11
    external_declaration           shift and go to state 12
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 37
    direct_declarator              shift and go to state 24
    declaration_specifiers         shift and go to state 25
    declaration                    shift and go to state 26
    function_definition            shift and go to state 28
    enum_specifier                 shift and go to state 34
    type_qualifier                 shift and go to state 32
    translation_unit               shift and go to state 20
    declarator                     shift and go to state 36

state 1

    (79) declaration_specifiers -> storage_class_specifier .
    (80) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    *               reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    (               reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    [               reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    ,               reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    )               reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    ;               reduce using rule 79 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 32
    declaration_specifiers         shift and go to state 38

state 2

    (96) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 96 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 96 (type_specifier -> SHORT .)
    STATIC          reduce using rule 96 (type_specifier -> SHORT .)
    AUTO            reduce using rule 96 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 96 (type_specifier -> SHORT .)
    VOID            reduce using rule 96 (type_specifier -> SHORT .)
    CHAR            reduce using rule 96 (type_specifier -> SHORT .)
    SHORT           reduce using rule 96 (type_specifier -> SHORT .)
    INT             reduce using rule 96 (type_specifier -> SHORT .)
    LONG            reduce using rule 96 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 96 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 96 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 96 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 96 (type_specifier -> SHORT .)
    TYPE_NAME       reduce using rule 96 (type_specifier -> SHORT .)
    CONST           reduce using rule 96 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 96 (type_specifier -> SHORT .)
    ENUM            reduce using rule 96 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 96 (type_specifier -> SHORT .)
    UNION           reduce using rule 96 (type_specifier -> SHORT .)
    ;               reduce using rule 96 (type_specifier -> SHORT .)
    *               reduce using rule 96 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 96 (type_specifier -> SHORT .)
    (               reduce using rule 96 (type_specifier -> SHORT .)
    :               reduce using rule 96 (type_specifier -> SHORT .)
    [               reduce using rule 96 (type_specifier -> SHORT .)
    )               reduce using rule 96 (type_specifier -> SHORT .)
    ,               reduce using rule 96 (type_specifier -> SHORT .)


state 3

    (130) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 130 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 130 (type_qualifier -> CONST .)
    STATIC          reduce using rule 130 (type_qualifier -> CONST .)
    AUTO            reduce using rule 130 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 130 (type_qualifier -> CONST .)
    VOID            reduce using rule 130 (type_qualifier -> CONST .)
    CHAR            reduce using rule 130 (type_qualifier -> CONST .)
    SHORT           reduce using rule 130 (type_qualifier -> CONST .)
    INT             reduce using rule 130 (type_qualifier -> CONST .)
    LONG            reduce using rule 130 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 130 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 130 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 130 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 130 (type_qualifier -> CONST .)
    TYPE_NAME       reduce using rule 130 (type_qualifier -> CONST .)
    CONST           reduce using rule 130 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 130 (type_qualifier -> CONST .)
    ENUM            reduce using rule 130 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 130 (type_qualifier -> CONST .)
    UNION           reduce using rule 130 (type_qualifier -> CONST .)
    ;               reduce using rule 130 (type_qualifier -> CONST .)
    *               reduce using rule 130 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 130 (type_qualifier -> CONST .)
    (               reduce using rule 130 (type_qualifier -> CONST .)
    [               reduce using rule 130 (type_qualifier -> CONST .)
    ,               reduce using rule 130 (type_qualifier -> CONST .)
    )               reduce using rule 130 (type_qualifier -> CONST .)
    :               reduce using rule 130 (type_qualifier -> CONST .)


state 4

    (103) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    TYPE_NAME       reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    ;               reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    *               reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    (               reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    :               reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    [               reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    )               reduce using rule 103 (type_specifier -> struct_or_union_specifier .)
    ,               reduce using rule 103 (type_specifier -> struct_or_union_specifier .)


state 5

    (94) type_specifier -> VOID .

    TYPEDEF         reduce using rule 94 (type_specifier -> VOID .)
    EXTERN          reduce using rule 94 (type_specifier -> VOID .)
    STATIC          reduce using rule 94 (type_specifier -> VOID .)
    AUTO            reduce using rule 94 (type_specifier -> VOID .)
    REGISTER        reduce using rule 94 (type_specifier -> VOID .)
    VOID            reduce using rule 94 (type_specifier -> VOID .)
    CHAR            reduce using rule 94 (type_specifier -> VOID .)
    SHORT           reduce using rule 94 (type_specifier -> VOID .)
    INT             reduce using rule 94 (type_specifier -> VOID .)
    LONG            reduce using rule 94 (type_specifier -> VOID .)
    FLOAT           reduce using rule 94 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 94 (type_specifier -> VOID .)
    SIGNED          reduce using rule 94 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 94 (type_specifier -> VOID .)
    TYPE_NAME       reduce using rule 94 (type_specifier -> VOID .)
    CONST           reduce using rule 94 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 94 (type_specifier -> VOID .)
    ENUM            reduce using rule 94 (type_specifier -> VOID .)
    STRUCT          reduce using rule 94 (type_specifier -> VOID .)
    UNION           reduce using rule 94 (type_specifier -> VOID .)
    ;               reduce using rule 94 (type_specifier -> VOID .)
    *               reduce using rule 94 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 94 (type_specifier -> VOID .)
    (               reduce using rule 94 (type_specifier -> VOID .)
    :               reduce using rule 94 (type_specifier -> VOID .)
    [               reduce using rule 94 (type_specifier -> VOID .)
    )               reduce using rule 94 (type_specifier -> VOID .)
    ,               reduce using rule 94 (type_specifier -> VOID .)


state 6

    (141) pointer -> * .
    (142) pointer -> * . type_qualifier_list
    (143) pointer -> * . pointer
    (144) pointer -> * . type_qualifier_list pointer
    (145) type_qualifier_list -> . type_qualifier
    (146) type_qualifier_list -> . type_qualifier_list type_qualifier
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE

    (               reduce using rule 141 (pointer -> * .)
    [               reduce using rule 141 (pointer -> * .)
    )               reduce using rule 141 (pointer -> * .)
    IDENTIFIER      reduce using rule 141 (pointer -> * .)
    ,               reduce using rule 141 (pointer -> * .)
    *               shift and go to state 6
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35

    type_qualifier_list            shift and go to state 39
    pointer                        shift and go to state 41
    type_qualifier                 shift and go to state 40

state 7

    (95) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 95 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 95 (type_specifier -> CHAR .)
    STATIC          reduce using rule 95 (type_specifier -> CHAR .)
    AUTO            reduce using rule 95 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 95 (type_specifier -> CHAR .)
    VOID            reduce using rule 95 (type_specifier -> CHAR .)
    CHAR            reduce using rule 95 (type_specifier -> CHAR .)
    SHORT           reduce using rule 95 (type_specifier -> CHAR .)
    INT             reduce using rule 95 (type_specifier -> CHAR .)
    LONG            reduce using rule 95 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 95 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 95 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 95 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 95 (type_specifier -> CHAR .)
    TYPE_NAME       reduce using rule 95 (type_specifier -> CHAR .)
    CONST           reduce using rule 95 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 95 (type_specifier -> CHAR .)
    ENUM            reduce using rule 95 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 95 (type_specifier -> CHAR .)
    UNION           reduce using rule 95 (type_specifier -> CHAR .)
    ;               reduce using rule 95 (type_specifier -> CHAR .)
    *               reduce using rule 95 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 95 (type_specifier -> CHAR .)
    (               reduce using rule 95 (type_specifier -> CHAR .)
    :               reduce using rule 95 (type_specifier -> CHAR .)
    [               reduce using rule 95 (type_specifier -> CHAR .)
    )               reduce using rule 95 (type_specifier -> CHAR .)
    ,               reduce using rule 95 (type_specifier -> CHAR .)


state 8

    (91) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 91 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 91 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 91 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 91 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 91 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 91 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 91 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 91 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 91 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 91 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 91 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 91 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 91 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 91 (storage_class_specifier -> STATIC .)
    TYPE_NAME       reduce using rule 91 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 91 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 91 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 91 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 91 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 91 (storage_class_specifier -> STATIC .)
    *               reduce using rule 91 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 91 (storage_class_specifier -> STATIC .)
    (               reduce using rule 91 (storage_class_specifier -> STATIC .)
    [               reduce using rule 91 (storage_class_specifier -> STATIC .)
    ,               reduce using rule 91 (storage_class_specifier -> STATIC .)
    )               reduce using rule 91 (storage_class_specifier -> STATIC .)
    ;               reduce using rule 91 (storage_class_specifier -> STATIC .)


state 9

    (90) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 90 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 90 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 90 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 90 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 90 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 90 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 90 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 90 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 90 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 90 (storage_class_specifier -> EXTERN .)
    TYPE_NAME       reduce using rule 90 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 90 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 90 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 90 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 90 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 90 (storage_class_specifier -> EXTERN .)
    *               reduce using rule 90 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 90 (storage_class_specifier -> EXTERN .)
    (               reduce using rule 90 (storage_class_specifier -> EXTERN .)
    [               reduce using rule 90 (storage_class_specifier -> EXTERN .)
    ,               reduce using rule 90 (storage_class_specifier -> EXTERN .)
    )               reduce using rule 90 (storage_class_specifier -> EXTERN .)
    ;               reduce using rule 90 (storage_class_specifier -> EXTERN .)


state 10

    (105) type_specifier -> TYPE_NAME .

    TYPEDEF         reduce using rule 105 (type_specifier -> TYPE_NAME .)
    EXTERN          reduce using rule 105 (type_specifier -> TYPE_NAME .)
    STATIC          reduce using rule 105 (type_specifier -> TYPE_NAME .)
    AUTO            reduce using rule 105 (type_specifier -> TYPE_NAME .)
    REGISTER        reduce using rule 105 (type_specifier -> TYPE_NAME .)
    VOID            reduce using rule 105 (type_specifier -> TYPE_NAME .)
    CHAR            reduce using rule 105 (type_specifier -> TYPE_NAME .)
    SHORT           reduce using rule 105 (type_specifier -> TYPE_NAME .)
    INT             reduce using rule 105 (type_specifier -> TYPE_NAME .)
    LONG            reduce using rule 105 (type_specifier -> TYPE_NAME .)
    FLOAT           reduce using rule 105 (type_specifier -> TYPE_NAME .)
    DOUBLE          reduce using rule 105 (type_specifier -> TYPE_NAME .)
    SIGNED          reduce using rule 105 (type_specifier -> TYPE_NAME .)
    UNSIGNED        reduce using rule 105 (type_specifier -> TYPE_NAME .)
    TYPE_NAME       reduce using rule 105 (type_specifier -> TYPE_NAME .)
    CONST           reduce using rule 105 (type_specifier -> TYPE_NAME .)
    VOLATILE        reduce using rule 105 (type_specifier -> TYPE_NAME .)
    ENUM            reduce using rule 105 (type_specifier -> TYPE_NAME .)
    STRUCT          reduce using rule 105 (type_specifier -> TYPE_NAME .)
    UNION           reduce using rule 105 (type_specifier -> TYPE_NAME .)
    ;               reduce using rule 105 (type_specifier -> TYPE_NAME .)
    *               reduce using rule 105 (type_specifier -> TYPE_NAME .)
    IDENTIFIER      reduce using rule 105 (type_specifier -> TYPE_NAME .)
    (               reduce using rule 105 (type_specifier -> TYPE_NAME .)
    :               reduce using rule 105 (type_specifier -> TYPE_NAME .)
    [               reduce using rule 105 (type_specifier -> TYPE_NAME .)
    )               reduce using rule 105 (type_specifier -> TYPE_NAME .)
    ,               reduce using rule 105 (type_specifier -> TYPE_NAME .)


state 11

    (132) declarator -> pointer . direct_declarator
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )

    IDENTIFIER      shift and go to state 19
    (               shift and go to state 14

    direct_declarator              shift and go to state 42

state 12

    (1) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 1 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 1 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 1 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 1 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 1 (translation_unit -> external_declaration .)
    VOID            reduce using rule 1 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 1 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 1 (translation_unit -> external_declaration .)
    INT             reduce using rule 1 (translation_unit -> external_declaration .)
    LONG            reduce using rule 1 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 1 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 1 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 1 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 1 (translation_unit -> external_declaration .)
    TYPE_NAME       reduce using rule 1 (translation_unit -> external_declaration .)
    CONST           reduce using rule 1 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 1 (translation_unit -> external_declaration .)
    *               reduce using rule 1 (translation_unit -> external_declaration .)
    IDENTIFIER      reduce using rule 1 (translation_unit -> external_declaration .)
    (               reduce using rule 1 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 1 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 1 (translation_unit -> external_declaration .)
    UNION           reduce using rule 1 (translation_unit -> external_declaration .)
    $end            reduce using rule 1 (translation_unit -> external_declaration .)


state 13

    (81) declaration_specifiers -> type_specifier .
    (82) declaration_specifiers -> type_specifier . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    *               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 81 (declaration_specifiers -> type_specifier .)
    (               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    )               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    ;               reduce using rule 81 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 32
    declaration_specifiers         shift and go to state 43

state 14

    (135) direct_declarator -> ( . declarator )
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 14

    direct_declarator              shift and go to state 24
    declarator                     shift and go to state 44
    pointer                        shift and go to state 11

state 15

    (93) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 93 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 93 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 93 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 93 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 93 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 93 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 93 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 93 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 93 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 93 (storage_class_specifier -> REGISTER .)
    TYPE_NAME       reduce using rule 93 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 93 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 93 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 93 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 93 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 93 (storage_class_specifier -> REGISTER .)
    *               reduce using rule 93 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 93 (storage_class_specifier -> REGISTER .)
    (               reduce using rule 93 (storage_class_specifier -> REGISTER .)
    [               reduce using rule 93 (storage_class_specifier -> REGISTER .)
    ,               reduce using rule 93 (storage_class_specifier -> REGISTER .)
    )               reduce using rule 93 (storage_class_specifier -> REGISTER .)
    ;               reduce using rule 93 (storage_class_specifier -> REGISTER .)


state 16

    (102) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 102 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 102 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 102 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 102 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 102 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 102 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 102 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 102 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 102 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 102 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 102 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 102 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 102 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 102 (type_specifier -> UNSIGNED .)
    TYPE_NAME       reduce using rule 102 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 102 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 102 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 102 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 102 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 102 (type_specifier -> UNSIGNED .)
    ;               reduce using rule 102 (type_specifier -> UNSIGNED .)
    *               reduce using rule 102 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 102 (type_specifier -> UNSIGNED .)
    (               reduce using rule 102 (type_specifier -> UNSIGNED .)
    :               reduce using rule 102 (type_specifier -> UNSIGNED .)
    [               reduce using rule 102 (type_specifier -> UNSIGNED .)
    )               reduce using rule 102 (type_specifier -> UNSIGNED .)
    ,               reduce using rule 102 (type_specifier -> UNSIGNED .)


state 17

    (98) type_specifier -> LONG .

    TYPEDEF         reduce using rule 98 (type_specifier -> LONG .)
    EXTERN          reduce using rule 98 (type_specifier -> LONG .)
    STATIC          reduce using rule 98 (type_specifier -> LONG .)
    AUTO            reduce using rule 98 (type_specifier -> LONG .)
    REGISTER        reduce using rule 98 (type_specifier -> LONG .)
    VOID            reduce using rule 98 (type_specifier -> LONG .)
    CHAR            reduce using rule 98 (type_specifier -> LONG .)
    SHORT           reduce using rule 98 (type_specifier -> LONG .)
    INT             reduce using rule 98 (type_specifier -> LONG .)
    LONG            reduce using rule 98 (type_specifier -> LONG .)
    FLOAT           reduce using rule 98 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 98 (type_specifier -> LONG .)
    SIGNED          reduce using rule 98 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 98 (type_specifier -> LONG .)
    TYPE_NAME       reduce using rule 98 (type_specifier -> LONG .)
    CONST           reduce using rule 98 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 98 (type_specifier -> LONG .)
    ENUM            reduce using rule 98 (type_specifier -> LONG .)
    STRUCT          reduce using rule 98 (type_specifier -> LONG .)
    UNION           reduce using rule 98 (type_specifier -> LONG .)
    ;               reduce using rule 98 (type_specifier -> LONG .)
    *               reduce using rule 98 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 98 (type_specifier -> LONG .)
    (               reduce using rule 98 (type_specifier -> LONG .)
    :               reduce using rule 98 (type_specifier -> LONG .)
    [               reduce using rule 98 (type_specifier -> LONG .)
    )               reduce using rule 98 (type_specifier -> LONG .)
    ,               reduce using rule 98 (type_specifier -> LONG .)


state 18

    (110) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 110 (struct_or_union -> UNION .)
    {               reduce using rule 110 (struct_or_union -> UNION .)


state 19

    (134) direct_declarator -> IDENTIFIER .

    [               reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    (               reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    =               reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    ;               reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    ,               reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    {               reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    TYPE_NAME       reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    )               reduce using rule 134 (direct_declarator -> IDENTIFIER .)
    :               reduce using rule 134 (direct_declarator -> IDENTIFIER .)


state 20

    (0) S' -> translation_unit .
    (2) translation_unit -> translation_unit . external_declaration
    (206) external_declaration -> . function_definition
    (207) external_declaration -> . declaration
    (208) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (209) function_definition -> . declaration_specifiers declarator compound_statement
    (210) function_definition -> . declarator declaration_list compound_statement
    (211) function_definition -> . declarator compound_statement
    (77) declaration -> . declaration_specifiers ;
    (78) declaration -> . declaration_specifiers init_declarator_list ;
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 14
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union_specifier      shift and go to state 4
    pointer                        shift and go to state 11
    external_declaration           shift and go to state 45
    type_specifier                 shift and go to state 13
    struct_or_union                shift and go to state 37
    direct_declarator              shift and go to state 24
    declaration_specifiers         shift and go to state 25
    declaration                    shift and go to state 26
    function_definition            shift and go to state 28
    enum_specifier                 shift and go to state 34
    type_qualifier                 shift and go to state 32
    declarator                     shift and go to state 36

state 21

    (89) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    TYPE_NAME       reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    *               reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    (               reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    [               reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    ,               reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    )               reduce using rule 89 (storage_class_specifier -> TYPEDEF .)
    ;               reduce using rule 89 (storage_class_specifier -> TYPEDEF .)


state 22

    (123) enum_specifier -> ENUM . { enumerator_list }
    (124) enum_specifier -> ENUM . IDENTIFIER { enumerator_list }
    (125) enum_specifier -> ENUM . IDENTIFIER

    {               shift and go to state 47
    IDENTIFIER      shift and go to state 46


state 23

    (92) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 92 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 92 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 92 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 92 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 92 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 92 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 92 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 92 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 92 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 92 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 92 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 92 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 92 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 92 (storage_class_specifier -> AUTO .)
    TYPE_NAME       reduce using rule 92 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 92 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 92 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 92 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 92 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 92 (storage_class_specifier -> AUTO .)
    *               reduce using rule 92 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 92 (storage_class_specifier -> AUTO .)
    (               reduce using rule 92 (storage_class_specifier -> AUTO .)
    [               reduce using rule 92 (storage_class_specifier -> AUTO .)
    ,               reduce using rule 92 (storage_class_specifier -> AUTO .)
    )               reduce using rule 92 (storage_class_specifier -> AUTO .)
    ;               reduce using rule 92 (storage_class_specifier -> AUTO .)


state 24

    (133) declarator -> direct_declarator .
    (136) direct_declarator -> direct_declarator . [ constant_expression ]
    (137) direct_declarator -> direct_declarator . [ ]
    (138) direct_declarator -> direct_declarator . ( parameter_type_list )
    (139) direct_declarator -> direct_declarator . ( identifier_list )
    (140) direct_declarator -> direct_declarator . ( )

    {               reduce using rule 133 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 133 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 133 (declarator -> direct_declarator .)
    STATIC          reduce using rule 133 (declarator -> direct_declarator .)
    AUTO            reduce using rule 133 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 133 (declarator -> direct_declarator .)
    VOID            reduce using rule 133 (declarator -> direct_declarator .)
    CHAR            reduce using rule 133 (declarator -> direct_declarator .)
    SHORT           reduce using rule 133 (declarator -> direct_declarator .)
    INT             reduce using rule 133 (declarator -> direct_declarator .)
    LONG            reduce using rule 133 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 133 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 133 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 133 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 133 (declarator -> direct_declarator .)
    TYPE_NAME       reduce using rule 133 (declarator -> direct_declarator .)
    CONST           reduce using rule 133 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 133 (declarator -> direct_declarator .)
    ENUM            reduce using rule 133 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 133 (declarator -> direct_declarator .)
    UNION           reduce using rule 133 (declarator -> direct_declarator .)
    )               reduce using rule 133 (declarator -> direct_declarator .)
    :               reduce using rule 133 (declarator -> direct_declarator .)
    ;               reduce using rule 133 (declarator -> direct_declarator .)
    ,               reduce using rule 133 (declarator -> direct_declarator .)
    =               reduce using rule 133 (declarator -> direct_declarator .)
    [               shift and go to state 49
    (               shift and go to state 48


state 25

    (208) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (209) function_definition -> declaration_specifiers . declarator compound_statement
    (77) declaration -> declaration_specifiers . ;
    (78) declaration -> declaration_specifiers . init_declarator_list ;
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (85) init_declarator_list -> . init_declarator
    (86) init_declarator_list -> . init_declarator_list , init_declarator
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )
    (87) init_declarator -> . declarator
    (88) init_declarator -> . declarator = initializer

    ;               shift and go to state 50
    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 14

    direct_declarator              shift and go to state 24
    init_declarator                shift and go to state 52
    init_declarator_list           shift and go to state 51
    declarator                     shift and go to state 53
    pointer                        shift and go to state 11

state 26

    (207) external_declaration -> declaration .

    TYPEDEF         reduce using rule 207 (external_declaration -> declaration .)
    EXTERN          reduce using rule 207 (external_declaration -> declaration .)
    STATIC          reduce using rule 207 (external_declaration -> declaration .)
    AUTO            reduce using rule 207 (external_declaration -> declaration .)
    REGISTER        reduce using rule 207 (external_declaration -> declaration .)
    VOID            reduce using rule 207 (external_declaration -> declaration .)
    CHAR            reduce using rule 207 (external_declaration -> declaration .)
    SHORT           reduce using rule 207 (external_declaration -> declaration .)
    INT             reduce using rule 207 (external_declaration -> declaration .)
    LONG            reduce using rule 207 (external_declaration -> declaration .)
    FLOAT           reduce using rule 207 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 207 (external_declaration -> declaration .)
    SIGNED          reduce using rule 207 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 207 (external_declaration -> declaration .)
    TYPE_NAME       reduce using rule 207 (external_declaration -> declaration .)
    CONST           reduce using rule 207 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 207 (external_declaration -> declaration .)
    *               reduce using rule 207 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 207 (external_declaration -> declaration .)
    (               reduce using rule 207 (external_declaration -> declaration .)
    ENUM            reduce using rule 207 (external_declaration -> declaration .)
    STRUCT          reduce using rule 207 (external_declaration -> declaration .)
    UNION           reduce using rule 207 (external_declaration -> declaration .)
    $end            reduce using rule 207 (external_declaration -> declaration .)


state 27

    (99) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 99 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 99 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 99 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 99 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 99 (type_specifier -> FLOAT .)
    VOID            reduce using rule 99 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 99 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 99 (type_specifier -> FLOAT .)
    INT             reduce using rule 99 (type_specifier -> FLOAT .)
    LONG            reduce using rule 99 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 99 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 99 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 99 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 99 (type_specifier -> FLOAT .)
    TYPE_NAME       reduce using rule 99 (type_specifier -> FLOAT .)
    CONST           reduce using rule 99 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 99 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 99 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 99 (type_specifier -> FLOAT .)
    UNION           reduce using rule 99 (type_specifier -> FLOAT .)
    ;               reduce using rule 99 (type_specifier -> FLOAT .)
    *               reduce using rule 99 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 99 (type_specifier -> FLOAT .)
    (               reduce using rule 99 (type_specifier -> FLOAT .)
    :               reduce using rule 99 (type_specifier -> FLOAT .)
    [               reduce using rule 99 (type_specifier -> FLOAT .)
    )               reduce using rule 99 (type_specifier -> FLOAT .)
    ,               reduce using rule 99 (type_specifier -> FLOAT .)


state 28

    (206) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 206 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 206 (external_declaration -> function_definition .)
    STATIC          reduce using rule 206 (external_declaration -> function_definition .)
    AUTO            reduce using rule 206 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 206 (external_declaration -> function_definition .)
    VOID            reduce using rule 206 (external_declaration -> function_definition .)
    CHAR            reduce using rule 206 (external_declaration -> function_definition .)
    SHORT           reduce using rule 206 (external_declaration -> function_definition .)
    INT             reduce using rule 206 (external_declaration -> function_definition .)
    LONG            reduce using rule 206 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 206 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 206 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 206 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 206 (external_declaration -> function_definition .)
    TYPE_NAME       reduce using rule 206 (external_declaration -> function_definition .)
    CONST           reduce using rule 206 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 206 (external_declaration -> function_definition .)
    *               reduce using rule 206 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 206 (external_declaration -> function_definition .)
    (               reduce using rule 206 (external_declaration -> function_definition .)
    ENUM            reduce using rule 206 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 206 (external_declaration -> function_definition .)
    UNION           reduce using rule 206 (external_declaration -> function_definition .)
    $end            reduce using rule 206 (external_declaration -> function_definition .)


state 29

    (109) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 109 (struct_or_union -> STRUCT .)
    {               reduce using rule 109 (struct_or_union -> STRUCT .)


state 30

    (97) type_specifier -> INT .

    TYPEDEF         reduce using rule 97 (type_specifier -> INT .)
    EXTERN          reduce using rule 97 (type_specifier -> INT .)
    STATIC          reduce using rule 97 (type_specifier -> INT .)
    AUTO            reduce using rule 97 (type_specifier -> INT .)
    REGISTER        reduce using rule 97 (type_specifier -> INT .)
    VOID            reduce using rule 97 (type_specifier -> INT .)
    CHAR            reduce using rule 97 (type_specifier -> INT .)
    SHORT           reduce using rule 97 (type_specifier -> INT .)
    INT             reduce using rule 97 (type_specifier -> INT .)
    LONG            reduce using rule 97 (type_specifier -> INT .)
    FLOAT           reduce using rule 97 (type_specifier -> INT .)
    DOUBLE          reduce using rule 97 (type_specifier -> INT .)
    SIGNED          reduce using rule 97 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 97 (type_specifier -> INT .)
    TYPE_NAME       reduce using rule 97 (type_specifier -> INT .)
    CONST           reduce using rule 97 (type_specifier -> INT .)
    VOLATILE        reduce using rule 97 (type_specifier -> INT .)
    ENUM            reduce using rule 97 (type_specifier -> INT .)
    STRUCT          reduce using rule 97 (type_specifier -> INT .)
    UNION           reduce using rule 97 (type_specifier -> INT .)
    ;               reduce using rule 97 (type_specifier -> INT .)
    *               reduce using rule 97 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 97 (type_specifier -> INT .)
    (               reduce using rule 97 (type_specifier -> INT .)
    :               reduce using rule 97 (type_specifier -> INT .)
    [               reduce using rule 97 (type_specifier -> INT .)
    )               reduce using rule 97 (type_specifier -> INT .)
    ,               reduce using rule 97 (type_specifier -> INT .)


state 31

    (100) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 100 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 100 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 100 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 100 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 100 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 100 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 100 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 100 (type_specifier -> DOUBLE .)
    INT             reduce using rule 100 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 100 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 100 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 100 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 100 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 100 (type_specifier -> DOUBLE .)
    TYPE_NAME       reduce using rule 100 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 100 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 100 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 100 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 100 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 100 (type_specifier -> DOUBLE .)
    ;               reduce using rule 100 (type_specifier -> DOUBLE .)
    *               reduce using rule 100 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 100 (type_specifier -> DOUBLE .)
    (               reduce using rule 100 (type_specifier -> DOUBLE .)
    :               reduce using rule 100 (type_specifier -> DOUBLE .)
    [               reduce using rule 100 (type_specifier -> DOUBLE .)
    )               reduce using rule 100 (type_specifier -> DOUBLE .)
    ,               reduce using rule 100 (type_specifier -> DOUBLE .)


state 32

    (83) declaration_specifiers -> type_qualifier .
    (84) declaration_specifiers -> type_qualifier . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    *               reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    (               reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    [               reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    ,               reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    )               reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    ;               reduce using rule 83 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 32
    declaration_specifiers         shift and go to state 54

state 33

    (101) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 101 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 101 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 101 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 101 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 101 (type_specifier -> SIGNED .)
    VOID            reduce using rule 101 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 101 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 101 (type_specifier -> SIGNED .)
    INT             reduce using rule 101 (type_specifier -> SIGNED .)
    LONG            reduce using rule 101 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 101 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 101 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 101 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 101 (type_specifier -> SIGNED .)
    TYPE_NAME       reduce using rule 101 (type_specifier -> SIGNED .)
    CONST           reduce using rule 101 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 101 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 101 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 101 (type_specifier -> SIGNED .)
    UNION           reduce using rule 101 (type_specifier -> SIGNED .)
    ;               reduce using rule 101 (type_specifier -> SIGNED .)
    *               reduce using rule 101 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 101 (type_specifier -> SIGNED .)
    (               reduce using rule 101 (type_specifier -> SIGNED .)
    :               reduce using rule 101 (type_specifier -> SIGNED .)
    [               reduce using rule 101 (type_specifier -> SIGNED .)
    )               reduce using rule 101 (type_specifier -> SIGNED .)
    ,               reduce using rule 101 (type_specifier -> SIGNED .)


state 34

    (104) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 104 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 104 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 104 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 104 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 104 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 104 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 104 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 104 (type_specifier -> enum_specifier .)
    INT             reduce using rule 104 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 104 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 104 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 104 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 104 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 104 (type_specifier -> enum_specifier .)
    TYPE_NAME       reduce using rule 104 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 104 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 104 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 104 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 104 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 104 (type_specifier -> enum_specifier .)
    ;               reduce using rule 104 (type_specifier -> enum_specifier .)
    *               reduce using rule 104 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 104 (type_specifier -> enum_specifier .)
    (               reduce using rule 104 (type_specifier -> enum_specifier .)
    :               reduce using rule 104 (type_specifier -> enum_specifier .)
    [               reduce using rule 104 (type_specifier -> enum_specifier .)
    )               reduce using rule 104 (type_specifier -> enum_specifier .)
    ,               reduce using rule 104 (type_specifier -> enum_specifier .)


state 35

    (131) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 131 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 131 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 131 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 131 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 131 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 131 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 131 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 131 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 131 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 131 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 131 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 131 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 131 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 131 (type_qualifier -> VOLATILE .)
    TYPE_NAME       reduce using rule 131 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 131 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 131 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 131 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 131 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 131 (type_qualifier -> VOLATILE .)
    ;               reduce using rule 131 (type_qualifier -> VOLATILE .)
    *               reduce using rule 131 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 131 (type_qualifier -> VOLATILE .)
    (               reduce using rule 131 (type_qualifier -> VOLATILE .)
    [               reduce using rule 131 (type_qualifier -> VOLATILE .)
    ,               reduce using rule 131 (type_qualifier -> VOLATILE .)
    )               reduce using rule 131 (type_qualifier -> VOLATILE .)
    :               reduce using rule 131 (type_qualifier -> VOLATILE .)


state 36

    (210) function_definition -> declarator . declaration_list compound_statement
    (211) function_definition -> declarator . compound_statement
    (188) declaration_list -> . declaration
    (189) declaration_list -> . declaration_list declaration
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (77) declaration -> . declaration_specifiers ;
    (78) declaration -> . declaration_specifiers init_declarator_list ;
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    {               shift and go to state 59
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    compound_statement             shift and go to state 55
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    declaration_list               shift and go to state 58
    type_qualifier                 shift and go to state 32
    declaration_specifiers         shift and go to state 56
    declaration                    shift and go to state 57

state 37

    (106) struct_or_union_specifier -> struct_or_union . IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> struct_or_union . { struct_declaration_list }
    (108) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 60
    {               shift and go to state 61


state 38

    (80) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    *               reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    (               reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    [               reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ,               reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    )               reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    ;               reduce using rule 80 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 39

    (142) pointer -> * type_qualifier_list .
    (144) pointer -> * type_qualifier_list . pointer
    (146) type_qualifier_list -> type_qualifier_list . type_qualifier
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE

    (               reduce using rule 142 (pointer -> * type_qualifier_list .)
    [               reduce using rule 142 (pointer -> * type_qualifier_list .)
    )               reduce using rule 142 (pointer -> * type_qualifier_list .)
    IDENTIFIER      reduce using rule 142 (pointer -> * type_qualifier_list .)
    ,               reduce using rule 142 (pointer -> * type_qualifier_list .)
    *               shift and go to state 6
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35

    pointer                        shift and go to state 63
    type_qualifier                 shift and go to state 62

state 40

    (145) type_qualifier_list -> type_qualifier .

    *               reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    (               reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    [               reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    ,               reduce using rule 145 (type_qualifier_list -> type_qualifier .)
    )               reduce using rule 145 (type_qualifier_list -> type_qualifier .)


state 41

    (143) pointer -> * pointer .

    (               reduce using rule 143 (pointer -> * pointer .)
    [               reduce using rule 143 (pointer -> * pointer .)
    )               reduce using rule 143 (pointer -> * pointer .)
    IDENTIFIER      reduce using rule 143 (pointer -> * pointer .)
    ,               reduce using rule 143 (pointer -> * pointer .)


state 42

    (132) declarator -> pointer direct_declarator .
    (136) direct_declarator -> direct_declarator . [ constant_expression ]
    (137) direct_declarator -> direct_declarator . [ ]
    (138) direct_declarator -> direct_declarator . ( parameter_type_list )
    (139) direct_declarator -> direct_declarator . ( identifier_list )
    (140) direct_declarator -> direct_declarator . ( )

    {               reduce using rule 132 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 132 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 132 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 132 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 132 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 132 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 132 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 132 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 132 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 132 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 132 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 132 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 132 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 132 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 132 (declarator -> pointer direct_declarator .)
    TYPE_NAME       reduce using rule 132 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 132 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 132 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 132 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 132 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 132 (declarator -> pointer direct_declarator .)
    )               reduce using rule 132 (declarator -> pointer direct_declarator .)
    :               reduce using rule 132 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 132 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 132 (declarator -> pointer direct_declarator .)
    =               reduce using rule 132 (declarator -> pointer direct_declarator .)
    [               shift and go to state 49
    (               shift and go to state 48


state 43

    (82) declaration_specifiers -> type_specifier declaration_specifiers .

    *               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    (               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    [               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ,               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    )               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)
    ;               reduce using rule 82 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 44

    (135) direct_declarator -> ( declarator . )

    )               shift and go to state 64


state 45

    (2) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    TYPE_NAME       reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    *               reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    IDENTIFIER      reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    (               reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 2 (translation_unit -> translation_unit external_declaration .)


state 46

    (124) enum_specifier -> ENUM IDENTIFIER . { enumerator_list }
    (125) enum_specifier -> ENUM IDENTIFIER .

    {               shift and go to state 65
    TYPEDEF         reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    TYPE_NAME       reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    ;               reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    *               reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    (               reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    [               reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    ,               reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    )               reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)
    :               reduce using rule 125 (enum_specifier -> ENUM IDENTIFIER .)


state 47

    (123) enum_specifier -> ENUM { . enumerator_list }
    (126) enumerator_list -> . enumerator
    (127) enumerator_list -> . enumerator_list , enumerator
    (128) enumerator -> . IDENTIFIER
    (129) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 68

    enumerator_list                shift and go to state 67
    enumerator                     shift and go to state 66

state 48

    (138) direct_declarator -> direct_declarator ( . parameter_type_list )
    (139) direct_declarator -> direct_declarator ( . identifier_list )
    (140) direct_declarator -> direct_declarator ( . )
    (147) parameter_type_list -> . parameter_list
    (148) parameter_type_list -> . parameter_list , ELLIPSIS
    (154) identifier_list -> . IDENTIFIER
    (155) identifier_list -> . identifier_list , IDENTIFIER
    (149) parameter_list -> . parameter_declaration
    (150) parameter_list -> . parameter_list , parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    )               shift and go to state 69
    IDENTIFIER      shift and go to state 70
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    parameter_list                 shift and go to state 75
    parameter_type_list            shift and go to state 71
    parameter_declaration          shift and go to state 72
    type_qualifier                 shift and go to state 32
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    declaration_specifiers         shift and go to state 73
    identifier_list                shift and go to state 74

state 49

    (136) direct_declarator -> direct_declarator [ . constant_expression ]
    (137) direct_declarator -> direct_declarator [ . ]
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    ]               shift and go to state 96
    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    multiplicative_expression      shift and go to state 102
    unary_expression               shift and go to state 77
    exclusive_or_expression        shift and go to state 79
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    equality_expression            shift and go to state 98
    and_expression                 shift and go to state 81
    unary_operator                 shift and go to state 90
    conditional_expression         shift and go to state 105
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    primary_expression             shift and go to state 94
    logical_or_expression          shift and go to state 92
    constant_expression            shift and go to state 104
    relational_expression          shift and go to state 89

state 50

    (77) declaration -> declaration_specifiers ; .

    }               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    IDENTIFIER      reduce using rule 77 (declaration -> declaration_specifiers ; .)
    CASE            reduce using rule 77 (declaration -> declaration_specifiers ; .)
    DEFAULT         reduce using rule 77 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 77 (declaration -> declaration_specifiers ; .)
    SWITCH          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 77 (declaration -> declaration_specifiers ; .)
    DO              reduce using rule 77 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 77 (declaration -> declaration_specifiers ; .)
    GOTO            reduce using rule 77 (declaration -> declaration_specifiers ; .)
    CONTINUE        reduce using rule 77 (declaration -> declaration_specifiers ; .)
    BREAK           reduce using rule 77 (declaration -> declaration_specifiers ; .)
    RETURN          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    TYPEDEF         reduce using rule 77 (declaration -> declaration_specifiers ; .)
    EXTERN          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    STATIC          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    AUTO            reduce using rule 77 (declaration -> declaration_specifiers ; .)
    REGISTER        reduce using rule 77 (declaration -> declaration_specifiers ; .)
    VOID            reduce using rule 77 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 77 (declaration -> declaration_specifiers ; .)
    SHORT           reduce using rule 77 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 77 (declaration -> declaration_specifiers ; .)
    LONG            reduce using rule 77 (declaration -> declaration_specifiers ; .)
    FLOAT           reduce using rule 77 (declaration -> declaration_specifiers ; .)
    DOUBLE          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    SIGNED          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    UNSIGNED        reduce using rule 77 (declaration -> declaration_specifiers ; .)
    TYPE_NAME       reduce using rule 77 (declaration -> declaration_specifiers ; .)
    CONST           reduce using rule 77 (declaration -> declaration_specifiers ; .)
    VOLATILE        reduce using rule 77 (declaration -> declaration_specifiers ; .)
    ENUM            reduce using rule 77 (declaration -> declaration_specifiers ; .)
    STRUCT          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    UNION           reduce using rule 77 (declaration -> declaration_specifiers ; .)
    INC_OP          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    DEC_OP          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    SIZEOF          reduce using rule 77 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    ~               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    CONSTANT        reduce using rule 77 (declaration -> declaration_specifiers ; .)
    STRING_LITERAL  reduce using rule 77 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 77 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 77 (declaration -> declaration_specifiers ; .)


state 51

    (78) declaration -> declaration_specifiers init_declarator_list . ;
    (86) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 107
    ,               shift and go to state 108


state 52

    (85) init_declarator_list -> init_declarator .

    ;               reduce using rule 85 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 85 (init_declarator_list -> init_declarator .)


state 53

    (208) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (209) function_definition -> declaration_specifiers declarator . compound_statement
    (87) init_declarator -> declarator .
    (88) init_declarator -> declarator . = initializer
    (188) declaration_list -> . declaration
    (189) declaration_list -> . declaration_list declaration
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (77) declaration -> . declaration_specifiers ;
    (78) declaration -> . declaration_specifiers init_declarator_list ;
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    ;               reduce using rule 87 (init_declarator -> declarator .)
    ,               reduce using rule 87 (init_declarator -> declarator .)
    =               shift and go to state 110
    {               shift and go to state 59
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    compound_statement             shift and go to state 109
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    declaration_list               shift and go to state 111
    type_qualifier                 shift and go to state 32
    declaration_specifiers         shift and go to state 56
    declaration                    shift and go to state 57

state 54

    (84) declaration_specifiers -> type_qualifier declaration_specifiers .

    *               reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    (               reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    [               reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ,               reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    )               reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ;               reduce using rule 84 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 55

    (211) function_definition -> declarator compound_statement .

    TYPEDEF         reduce using rule 211 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 211 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 211 (function_definition -> declarator compound_statement .)
    AUTO            reduce using rule 211 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 211 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 211 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 211 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 211 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 211 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 211 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 211 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 211 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 211 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 211 (function_definition -> declarator compound_statement .)
    TYPE_NAME       reduce using rule 211 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 211 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 211 (function_definition -> declarator compound_statement .)
    *               reduce using rule 211 (function_definition -> declarator compound_statement .)
    IDENTIFIER      reduce using rule 211 (function_definition -> declarator compound_statement .)
    (               reduce using rule 211 (function_definition -> declarator compound_statement .)
    ENUM            reduce using rule 211 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 211 (function_definition -> declarator compound_statement .)
    UNION           reduce using rule 211 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 211 (function_definition -> declarator compound_statement .)


state 56

    (77) declaration -> declaration_specifiers . ;
    (78) declaration -> declaration_specifiers . init_declarator_list ;
    (85) init_declarator_list -> . init_declarator
    (86) init_declarator_list -> . init_declarator_list , init_declarator
    (87) init_declarator -> . declarator
    (88) init_declarator -> . declarator = initializer
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )

    ;               shift and go to state 50
    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 14

    direct_declarator              shift and go to state 24
    init_declarator                shift and go to state 52
    declarator                     shift and go to state 112
    init_declarator_list           shift and go to state 51
    pointer                        shift and go to state 11

state 57

    (188) declaration_list -> declaration .

    {               reduce using rule 188 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 188 (declaration_list -> declaration .)
    EXTERN          reduce using rule 188 (declaration_list -> declaration .)
    STATIC          reduce using rule 188 (declaration_list -> declaration .)
    AUTO            reduce using rule 188 (declaration_list -> declaration .)
    REGISTER        reduce using rule 188 (declaration_list -> declaration .)
    VOID            reduce using rule 188 (declaration_list -> declaration .)
    CHAR            reduce using rule 188 (declaration_list -> declaration .)
    SHORT           reduce using rule 188 (declaration_list -> declaration .)
    INT             reduce using rule 188 (declaration_list -> declaration .)
    LONG            reduce using rule 188 (declaration_list -> declaration .)
    FLOAT           reduce using rule 188 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 188 (declaration_list -> declaration .)
    SIGNED          reduce using rule 188 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 188 (declaration_list -> declaration .)
    TYPE_NAME       reduce using rule 188 (declaration_list -> declaration .)
    CONST           reduce using rule 188 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 188 (declaration_list -> declaration .)
    ENUM            reduce using rule 188 (declaration_list -> declaration .)
    STRUCT          reduce using rule 188 (declaration_list -> declaration .)
    UNION           reduce using rule 188 (declaration_list -> declaration .)
    }               reduce using rule 188 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 188 (declaration_list -> declaration .)
    CASE            reduce using rule 188 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 188 (declaration_list -> declaration .)
    ;               reduce using rule 188 (declaration_list -> declaration .)
    IF              reduce using rule 188 (declaration_list -> declaration .)
    SWITCH          reduce using rule 188 (declaration_list -> declaration .)
    WHILE           reduce using rule 188 (declaration_list -> declaration .)
    DO              reduce using rule 188 (declaration_list -> declaration .)
    FOR             reduce using rule 188 (declaration_list -> declaration .)
    GOTO            reduce using rule 188 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 188 (declaration_list -> declaration .)
    BREAK           reduce using rule 188 (declaration_list -> declaration .)
    RETURN          reduce using rule 188 (declaration_list -> declaration .)
    INC_OP          reduce using rule 188 (declaration_list -> declaration .)
    DEC_OP          reduce using rule 188 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 188 (declaration_list -> declaration .)
    &               reduce using rule 188 (declaration_list -> declaration .)
    *               reduce using rule 188 (declaration_list -> declaration .)
    +               reduce using rule 188 (declaration_list -> declaration .)
    -               reduce using rule 188 (declaration_list -> declaration .)
    ~               reduce using rule 188 (declaration_list -> declaration .)
    !               reduce using rule 188 (declaration_list -> declaration .)
    CONSTANT        reduce using rule 188 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 188 (declaration_list -> declaration .)
    (               reduce using rule 188 (declaration_list -> declaration .)


state 58

    (210) function_definition -> declarator declaration_list . compound_statement
    (189) declaration_list -> declaration_list . declaration
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (77) declaration -> . declaration_specifiers ;
    (78) declaration -> . declaration_specifiers init_declarator_list ;
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    {               shift and go to state 59
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    compound_statement             shift and go to state 113
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 32
    declaration_specifiers         shift and go to state 56
    declaration                    shift and go to state 114

state 59

    (184) compound_statement -> { . }
    (185) compound_statement -> { . statement_list }
    (186) compound_statement -> { . declaration_list }
    (187) compound_statement -> { . declaration_list statement_list }
    (190) statement_list -> . statement
    (191) statement_list -> . statement_list statement
    (188) declaration_list -> . declaration
    (189) declaration_list -> . declaration_list declaration
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (77) declaration -> . declaration_specifiers ;
    (78) declaration -> . declaration_specifiers init_declarator_list ;
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 142
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    storage_class_specifier        shift and go to state 1
    unary_expression               shift and go to state 122
    struct_or_union_specifier      shift and go to state 4
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    type_specifier                 shift and go to state 13
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    selection_statement            shift and go to state 138
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 133
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    struct_or_union                shift and go to state 37
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    declaration_specifiers         shift and go to state 56
    declaration                    shift and go to state 57
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    enum_specifier                 shift and go to state 34
    type_qualifier                 shift and go to state 32
    labeled_statement              shift and go to state 119
    declaration_list               shift and go to state 120
    conditional_expression         shift and go to state 141
    statement_list                 shift and go to state 127
    expression                     shift and go to state 128

state 60

    (106) struct_or_union_specifier -> struct_or_union IDENTIFIER . { struct_declaration_list }
    (108) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    {               shift and go to state 143
    TYPEDEF         reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    TYPE_NAME       reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    *               reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    (               reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    [               reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ,               reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    )               reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    :               reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ;               reduce using rule 108 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 61

    (107) struct_or_union_specifier -> struct_or_union { . struct_declaration_list }
    (111) struct_declaration_list -> . struct_declaration
    (112) struct_declaration_list -> . struct_declaration_list struct_declaration
    (113) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (114) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_specifier
    (116) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (117) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 145
    struct_declaration             shift and go to state 146
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 148
    struct_declaration_list        shift and go to state 144

state 62

    (146) type_qualifier_list -> type_qualifier_list type_qualifier .

    *               reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    (               reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    [               reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ,               reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    )               reduce using rule 146 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 63

    (144) pointer -> * type_qualifier_list pointer .

    (               reduce using rule 144 (pointer -> * type_qualifier_list pointer .)
    [               reduce using rule 144 (pointer -> * type_qualifier_list pointer .)
    )               reduce using rule 144 (pointer -> * type_qualifier_list pointer .)
    IDENTIFIER      reduce using rule 144 (pointer -> * type_qualifier_list pointer .)
    ,               reduce using rule 144 (pointer -> * type_qualifier_list pointer .)


state 64

    (135) direct_declarator -> ( declarator ) .

    [               reduce using rule 135 (direct_declarator -> ( declarator ) .)
    (               reduce using rule 135 (direct_declarator -> ( declarator ) .)
    =               reduce using rule 135 (direct_declarator -> ( declarator ) .)
    ;               reduce using rule 135 (direct_declarator -> ( declarator ) .)
    ,               reduce using rule 135 (direct_declarator -> ( declarator ) .)
    {               reduce using rule 135 (direct_declarator -> ( declarator ) .)
    TYPEDEF         reduce using rule 135 (direct_declarator -> ( declarator ) .)
    EXTERN          reduce using rule 135 (direct_declarator -> ( declarator ) .)
    STATIC          reduce using rule 135 (direct_declarator -> ( declarator ) .)
    AUTO            reduce using rule 135 (direct_declarator -> ( declarator ) .)
    REGISTER        reduce using rule 135 (direct_declarator -> ( declarator ) .)
    VOID            reduce using rule 135 (direct_declarator -> ( declarator ) .)
    CHAR            reduce using rule 135 (direct_declarator -> ( declarator ) .)
    SHORT           reduce using rule 135 (direct_declarator -> ( declarator ) .)
    INT             reduce using rule 135 (direct_declarator -> ( declarator ) .)
    LONG            reduce using rule 135 (direct_declarator -> ( declarator ) .)
    FLOAT           reduce using rule 135 (direct_declarator -> ( declarator ) .)
    DOUBLE          reduce using rule 135 (direct_declarator -> ( declarator ) .)
    SIGNED          reduce using rule 135 (direct_declarator -> ( declarator ) .)
    UNSIGNED        reduce using rule 135 (direct_declarator -> ( declarator ) .)
    TYPE_NAME       reduce using rule 135 (direct_declarator -> ( declarator ) .)
    CONST           reduce using rule 135 (direct_declarator -> ( declarator ) .)
    VOLATILE        reduce using rule 135 (direct_declarator -> ( declarator ) .)
    ENUM            reduce using rule 135 (direct_declarator -> ( declarator ) .)
    STRUCT          reduce using rule 135 (direct_declarator -> ( declarator ) .)
    UNION           reduce using rule 135 (direct_declarator -> ( declarator ) .)
    )               reduce using rule 135 (direct_declarator -> ( declarator ) .)
    :               reduce using rule 135 (direct_declarator -> ( declarator ) .)


state 65

    (124) enum_specifier -> ENUM IDENTIFIER { . enumerator_list }
    (126) enumerator_list -> . enumerator
    (127) enumerator_list -> . enumerator_list , enumerator
    (128) enumerator -> . IDENTIFIER
    (129) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 68

    enumerator_list                shift and go to state 149
    enumerator                     shift and go to state 66

state 66

    (126) enumerator_list -> enumerator .

    }               reduce using rule 126 (enumerator_list -> enumerator .)
    ,               reduce using rule 126 (enumerator_list -> enumerator .)


state 67

    (123) enum_specifier -> ENUM { enumerator_list . }
    (127) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 151
    ,               shift and go to state 150


state 68

    (128) enumerator -> IDENTIFIER .
    (129) enumerator -> IDENTIFIER . = constant_expression

    }               reduce using rule 128 (enumerator -> IDENTIFIER .)
    ,               reduce using rule 128 (enumerator -> IDENTIFIER .)
    =               shift and go to state 152


state 69

    (140) direct_declarator -> direct_declarator ( ) .

    [               reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    (               reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    =               reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    ;               reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    ,               reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    {               reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    TYPEDEF         reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    EXTERN          reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    STATIC          reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    AUTO            reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    REGISTER        reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    VOID            reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    CHAR            reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    SHORT           reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    INT             reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    LONG            reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    FLOAT           reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    DOUBLE          reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    SIGNED          reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    UNSIGNED        reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    TYPE_NAME       reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    CONST           reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    VOLATILE        reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    ENUM            reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    STRUCT          reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    UNION           reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    )               reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)
    :               reduce using rule 140 (direct_declarator -> direct_declarator ( ) .)


state 70

    (154) identifier_list -> IDENTIFIER .

    )               reduce using rule 154 (identifier_list -> IDENTIFIER .)
    ,               reduce using rule 154 (identifier_list -> IDENTIFIER .)


state 71

    (138) direct_declarator -> direct_declarator ( parameter_type_list . )

    )               shift and go to state 153


state 72

    (149) parameter_list -> parameter_declaration .

    ,               reduce using rule 149 (parameter_list -> parameter_declaration .)
    )               reduce using rule 149 (parameter_list -> parameter_declaration .)


state 73

    (151) parameter_declaration -> declaration_specifiers . declarator
    (152) parameter_declaration -> declaration_specifiers . abstract_declarator
    (153) parameter_declaration -> declaration_specifiers .
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (158) abstract_declarator -> . pointer
    (159) abstract_declarator -> . direct_abstract_declarator
    (160) abstract_declarator -> . pointer direct_abstract_declarator
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )
    (161) direct_abstract_declarator -> . ( abstract_declarator )
    (162) direct_abstract_declarator -> . [ ]
    (163) direct_abstract_declarator -> . [ constant_expression ]
    (164) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (165) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (166) direct_abstract_declarator -> . ( )
    (167) direct_abstract_declarator -> . ( parameter_type_list )
    (168) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (169) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    ,               reduce using rule 153 (parameter_declaration -> declaration_specifiers .)
    )               reduce using rule 153 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 154
    [               shift and go to state 158

    direct_declarator              shift and go to state 24
    abstract_declarator            shift and go to state 155
    declarator                     shift and go to state 156
    direct_abstract_declarator     shift and go to state 157
    pointer                        shift and go to state 159

state 74

    (139) direct_declarator -> direct_declarator ( identifier_list . )
    (155) identifier_list -> identifier_list . , IDENTIFIER

    )               shift and go to state 160
    ,               shift and go to state 161


state 75

    (147) parameter_type_list -> parameter_list .
    (148) parameter_type_list -> parameter_list . , ELLIPSIS
    (150) parameter_list -> parameter_list . , parameter_declaration

    )               reduce using rule 147 (parameter_type_list -> parameter_list .)
    ,               shift and go to state 162


state 76

    (4) primary_expression -> CONSTANT .

    [               reduce using rule 4 (primary_expression -> CONSTANT .)
    (               reduce using rule 4 (primary_expression -> CONSTANT .)
    .               reduce using rule 4 (primary_expression -> CONSTANT .)
    PTR_OP          reduce using rule 4 (primary_expression -> CONSTANT .)
    INC_OP          reduce using rule 4 (primary_expression -> CONSTANT .)
    DEC_OP          reduce using rule 4 (primary_expression -> CONSTANT .)
    *               reduce using rule 4 (primary_expression -> CONSTANT .)
    /               reduce using rule 4 (primary_expression -> CONSTANT .)
    %               reduce using rule 4 (primary_expression -> CONSTANT .)
    +               reduce using rule 4 (primary_expression -> CONSTANT .)
    -               reduce using rule 4 (primary_expression -> CONSTANT .)
    LEFT_OP         reduce using rule 4 (primary_expression -> CONSTANT .)
    RIGHT_OP        reduce using rule 4 (primary_expression -> CONSTANT .)
    <               reduce using rule 4 (primary_expression -> CONSTANT .)
    >               reduce using rule 4 (primary_expression -> CONSTANT .)
    LE_OP           reduce using rule 4 (primary_expression -> CONSTANT .)
    GE_OP           reduce using rule 4 (primary_expression -> CONSTANT .)
    EQ_OP           reduce using rule 4 (primary_expression -> CONSTANT .)
    NE_OP           reduce using rule 4 (primary_expression -> CONSTANT .)
    &               reduce using rule 4 (primary_expression -> CONSTANT .)
    ^               reduce using rule 4 (primary_expression -> CONSTANT .)
    |               reduce using rule 4 (primary_expression -> CONSTANT .)
    AND_OP          reduce using rule 4 (primary_expression -> CONSTANT .)
    ?               reduce using rule 4 (primary_expression -> CONSTANT .)
    OR_OP           reduce using rule 4 (primary_expression -> CONSTANT .)
    ]               reduce using rule 4 (primary_expression -> CONSTANT .)
    =               reduce using rule 4 (primary_expression -> CONSTANT .)
    MUL_ASSIGN      reduce using rule 4 (primary_expression -> CONSTANT .)
    DIV_ASSIGN      reduce using rule 4 (primary_expression -> CONSTANT .)
    MOD_ASSIGN      reduce using rule 4 (primary_expression -> CONSTANT .)
    ADD_ASSIGN      reduce using rule 4 (primary_expression -> CONSTANT .)
    SUB_ASSIGN      reduce using rule 4 (primary_expression -> CONSTANT .)
    LEFT_ASSIGN     reduce using rule 4 (primary_expression -> CONSTANT .)
    RIGHT_ASSIGN    reduce using rule 4 (primary_expression -> CONSTANT .)
    AND_ASSIGN      reduce using rule 4 (primary_expression -> CONSTANT .)
    XOR_ASSIGN      reduce using rule 4 (primary_expression -> CONSTANT .)
    OR_ASSIGN       reduce using rule 4 (primary_expression -> CONSTANT .)
    ;               reduce using rule 4 (primary_expression -> CONSTANT .)
    ,               reduce using rule 4 (primary_expression -> CONSTANT .)
    )               reduce using rule 4 (primary_expression -> CONSTANT .)
    :               reduce using rule 4 (primary_expression -> CONSTANT .)
    }               reduce using rule 4 (primary_expression -> CONSTANT .)


state 77

    (29) cast_expression -> unary_expression .

    *               reduce using rule 29 (cast_expression -> unary_expression .)
    /               reduce using rule 29 (cast_expression -> unary_expression .)
    %               reduce using rule 29 (cast_expression -> unary_expression .)
    +               reduce using rule 29 (cast_expression -> unary_expression .)
    -               reduce using rule 29 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 29 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 29 (cast_expression -> unary_expression .)
    <               reduce using rule 29 (cast_expression -> unary_expression .)
    >               reduce using rule 29 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    &               reduce using rule 29 (cast_expression -> unary_expression .)
    ^               reduce using rule 29 (cast_expression -> unary_expression .)
    |               reduce using rule 29 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 29 (cast_expression -> unary_expression .)
    ?               reduce using rule 29 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    ]               reduce using rule 29 (cast_expression -> unary_expression .)
    ;               reduce using rule 29 (cast_expression -> unary_expression .)
    ,               reduce using rule 29 (cast_expression -> unary_expression .)
    )               reduce using rule 29 (cast_expression -> unary_expression .)
    :               reduce using rule 29 (cast_expression -> unary_expression .)
    }               reduce using rule 29 (cast_expression -> unary_expression .)
    =               reduce using rule 29 (cast_expression -> unary_expression .)
    MUL_ASSIGN      reduce using rule 29 (cast_expression -> unary_expression .)
    DIV_ASSIGN      reduce using rule 29 (cast_expression -> unary_expression .)
    MOD_ASSIGN      reduce using rule 29 (cast_expression -> unary_expression .)
    ADD_ASSIGN      reduce using rule 29 (cast_expression -> unary_expression .)
    SUB_ASSIGN      reduce using rule 29 (cast_expression -> unary_expression .)
    LEFT_ASSIGN     reduce using rule 29 (cast_expression -> unary_expression .)
    RIGHT_ASSIGN    reduce using rule 29 (cast_expression -> unary_expression .)
    AND_ASSIGN      reduce using rule 29 (cast_expression -> unary_expression .)
    XOR_ASSIGN      reduce using rule 29 (cast_expression -> unary_expression .)
    OR_ASSIGN       reduce using rule 29 (cast_expression -> unary_expression .)


state 78

    (19) unary_expression -> DEC_OP . unary_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 164

    unary_expression               shift and go to state 163
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 94
    unary_operator                 shift and go to state 90

state 79

    (53) inclusive_or_expression -> exclusive_or_expression .
    (52) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    AND_OP          reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OP           reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 53 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 165


state 80

    (21) unary_expression -> SIZEOF . unary_expression
    (22) unary_expression -> SIZEOF . ( type_name )
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 167
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 166
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 94
    unary_operator                 shift and go to state 90

state 81

    (51) exclusive_or_expression -> and_expression .
    (50) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 51 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 51 (exclusive_or_expression -> and_expression .)
    AND_OP          reduce using rule 51 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 51 (exclusive_or_expression -> and_expression .)
    OR_OP           reduce using rule 51 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 51 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 51 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 51 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 51 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 51 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 51 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 168


state 82

    (28) unary_operator -> ! .

    (               reduce using rule 28 (unary_operator -> ! .)
    INC_OP          reduce using rule 28 (unary_operator -> ! .)
    DEC_OP          reduce using rule 28 (unary_operator -> ! .)
    SIZEOF          reduce using rule 28 (unary_operator -> ! .)
    &               reduce using rule 28 (unary_operator -> ! .)
    *               reduce using rule 28 (unary_operator -> ! .)
    +               reduce using rule 28 (unary_operator -> ! .)
    -               reduce using rule 28 (unary_operator -> ! .)
    ~               reduce using rule 28 (unary_operator -> ! .)
    !               reduce using rule 28 (unary_operator -> ! .)
    IDENTIFIER      reduce using rule 28 (unary_operator -> ! .)
    CONSTANT        reduce using rule 28 (unary_operator -> ! .)
    STRING_LITERAL  reduce using rule 28 (unary_operator -> ! .)


state 83

    (23) unary_operator -> & .

    (               reduce using rule 23 (unary_operator -> & .)
    INC_OP          reduce using rule 23 (unary_operator -> & .)
    DEC_OP          reduce using rule 23 (unary_operator -> & .)
    SIZEOF          reduce using rule 23 (unary_operator -> & .)
    &               reduce using rule 23 (unary_operator -> & .)
    *               reduce using rule 23 (unary_operator -> & .)
    +               reduce using rule 23 (unary_operator -> & .)
    -               reduce using rule 23 (unary_operator -> & .)
    ~               reduce using rule 23 (unary_operator -> & .)
    !               reduce using rule 23 (unary_operator -> & .)
    IDENTIFIER      reduce using rule 23 (unary_operator -> & .)
    CONSTANT        reduce using rule 23 (unary_operator -> & .)
    STRING_LITERAL  reduce using rule 23 (unary_operator -> & .)


state 84

    (55) logical_and_expression -> inclusive_or_expression .
    (54) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    OR_OP           reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 55 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 169


state 85

    (30) cast_expression -> ( . type_name ) cast_expression
    (6) primary_expression -> ( . expression )
    (156) type_name -> . specifier_qualifier_list
    (157) type_name -> . specifier_qualifier_list abstract_declarator
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (114) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_specifier
    (116) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (117) specifier_qualifier_list -> . type_qualifier
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    ENUM            shift and go to state 22
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    struct_or_union_specifier      shift and go to state 4
    exclusive_or_expression        shift and go to state 79
    and_expression                 shift and go to state 81
    type_specifier                 shift and go to state 145
    inclusive_or_expression        shift and go to state 84
    type_name                      shift and go to state 170
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    struct_or_union                shift and go to state 37
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    enum_specifier                 shift and go to state 34
    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 171
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 172

state 86

    (25) unary_operator -> + .

    (               reduce using rule 25 (unary_operator -> + .)
    INC_OP          reduce using rule 25 (unary_operator -> + .)
    DEC_OP          reduce using rule 25 (unary_operator -> + .)
    SIZEOF          reduce using rule 25 (unary_operator -> + .)
    &               reduce using rule 25 (unary_operator -> + .)
    *               reduce using rule 25 (unary_operator -> + .)
    +               reduce using rule 25 (unary_operator -> + .)
    -               reduce using rule 25 (unary_operator -> + .)
    ~               reduce using rule 25 (unary_operator -> + .)
    !               reduce using rule 25 (unary_operator -> + .)
    IDENTIFIER      reduce using rule 25 (unary_operator -> + .)
    CONSTANT        reduce using rule 25 (unary_operator -> + .)
    STRING_LITERAL  reduce using rule 25 (unary_operator -> + .)


state 87

    (24) unary_operator -> * .

    (               reduce using rule 24 (unary_operator -> * .)
    INC_OP          reduce using rule 24 (unary_operator -> * .)
    DEC_OP          reduce using rule 24 (unary_operator -> * .)
    SIZEOF          reduce using rule 24 (unary_operator -> * .)
    &               reduce using rule 24 (unary_operator -> * .)
    *               reduce using rule 24 (unary_operator -> * .)
    +               reduce using rule 24 (unary_operator -> * .)
    -               reduce using rule 24 (unary_operator -> * .)
    ~               reduce using rule 24 (unary_operator -> * .)
    !               reduce using rule 24 (unary_operator -> * .)
    IDENTIFIER      reduce using rule 24 (unary_operator -> * .)
    CONSTANT        reduce using rule 24 (unary_operator -> * .)
    STRING_LITERAL  reduce using rule 24 (unary_operator -> * .)


state 88

    (26) unary_operator -> - .

    (               reduce using rule 26 (unary_operator -> - .)
    INC_OP          reduce using rule 26 (unary_operator -> - .)
    DEC_OP          reduce using rule 26 (unary_operator -> - .)
    SIZEOF          reduce using rule 26 (unary_operator -> - .)
    &               reduce using rule 26 (unary_operator -> - .)
    *               reduce using rule 26 (unary_operator -> - .)
    +               reduce using rule 26 (unary_operator -> - .)
    -               reduce using rule 26 (unary_operator -> - .)
    ~               reduce using rule 26 (unary_operator -> - .)
    !               reduce using rule 26 (unary_operator -> - .)
    IDENTIFIER      reduce using rule 26 (unary_operator -> - .)
    CONSTANT        reduce using rule 26 (unary_operator -> - .)
    STRING_LITERAL  reduce using rule 26 (unary_operator -> - .)


state 89

    (46) equality_expression -> relational_expression .
    (42) relational_expression -> relational_expression . < shift_expression
    (43) relational_expression -> relational_expression . > shift_expression
    (44) relational_expression -> relational_expression . LE_OP shift_expression
    (45) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 46 (equality_expression -> relational_expression .)
    NE_OP           reduce using rule 46 (equality_expression -> relational_expression .)
    &               reduce using rule 46 (equality_expression -> relational_expression .)
    ^               reduce using rule 46 (equality_expression -> relational_expression .)
    |               reduce using rule 46 (equality_expression -> relational_expression .)
    AND_OP          reduce using rule 46 (equality_expression -> relational_expression .)
    ?               reduce using rule 46 (equality_expression -> relational_expression .)
    OR_OP           reduce using rule 46 (equality_expression -> relational_expression .)
    ;               reduce using rule 46 (equality_expression -> relational_expression .)
    ,               reduce using rule 46 (equality_expression -> relational_expression .)
    ]               reduce using rule 46 (equality_expression -> relational_expression .)
    )               reduce using rule 46 (equality_expression -> relational_expression .)
    :               reduce using rule 46 (equality_expression -> relational_expression .)
    }               reduce using rule 46 (equality_expression -> relational_expression .)
    <               shift and go to state 174
    >               shift and go to state 176
    LE_OP           shift and go to state 173
    GE_OP           shift and go to state 175


state 90

    (20) unary_expression -> unary_operator . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 94
    cast_expression                shift and go to state 177
    unary_operator                 shift and go to state 90

state 91

    (31) multiplicative_expression -> cast_expression .

    *               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    LEFT_OP         reduce using rule 31 (multiplicative_expression -> cast_expression .)
    RIGHT_OP        reduce using rule 31 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    LE_OP           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    GE_OP           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    EQ_OP           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    NE_OP           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    AND_OP          reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    OR_OP           reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 31 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 31 (multiplicative_expression -> cast_expression .)


state 92

    (59) conditional_expression -> logical_or_expression .
    (60) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (58) logical_or_expression -> logical_or_expression . OR_OP logical_and_expression

    ;               reduce using rule 59 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 59 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 59 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 59 (conditional_expression -> logical_or_expression .)
    ]               reduce using rule 59 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 59 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 179
    OR_OP           shift and go to state 178


state 93

    (38) shift_expression -> additive_expression .
    (36) additive_expression -> additive_expression . + multiplicative_expression
    (37) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 38 (shift_expression -> additive_expression .)
    RIGHT_OP        reduce using rule 38 (shift_expression -> additive_expression .)
    <               reduce using rule 38 (shift_expression -> additive_expression .)
    >               reduce using rule 38 (shift_expression -> additive_expression .)
    LE_OP           reduce using rule 38 (shift_expression -> additive_expression .)
    GE_OP           reduce using rule 38 (shift_expression -> additive_expression .)
    EQ_OP           reduce using rule 38 (shift_expression -> additive_expression .)
    NE_OP           reduce using rule 38 (shift_expression -> additive_expression .)
    &               reduce using rule 38 (shift_expression -> additive_expression .)
    ^               reduce using rule 38 (shift_expression -> additive_expression .)
    |               reduce using rule 38 (shift_expression -> additive_expression .)
    AND_OP          reduce using rule 38 (shift_expression -> additive_expression .)
    ?               reduce using rule 38 (shift_expression -> additive_expression .)
    OR_OP           reduce using rule 38 (shift_expression -> additive_expression .)
    ]               reduce using rule 38 (shift_expression -> additive_expression .)
    ;               reduce using rule 38 (shift_expression -> additive_expression .)
    ,               reduce using rule 38 (shift_expression -> additive_expression .)
    )               reduce using rule 38 (shift_expression -> additive_expression .)
    :               reduce using rule 38 (shift_expression -> additive_expression .)
    }               reduce using rule 38 (shift_expression -> additive_expression .)
    +               shift and go to state 180
    -               shift and go to state 181


state 94

    (7) postfix_expression -> primary_expression .

    [               reduce using rule 7 (postfix_expression -> primary_expression .)
    (               reduce using rule 7 (postfix_expression -> primary_expression .)
    .               reduce using rule 7 (postfix_expression -> primary_expression .)
    PTR_OP          reduce using rule 7 (postfix_expression -> primary_expression .)
    INC_OP          reduce using rule 7 (postfix_expression -> primary_expression .)
    DEC_OP          reduce using rule 7 (postfix_expression -> primary_expression .)
    *               reduce using rule 7 (postfix_expression -> primary_expression .)
    /               reduce using rule 7 (postfix_expression -> primary_expression .)
    %               reduce using rule 7 (postfix_expression -> primary_expression .)
    +               reduce using rule 7 (postfix_expression -> primary_expression .)
    -               reduce using rule 7 (postfix_expression -> primary_expression .)
    LEFT_OP         reduce using rule 7 (postfix_expression -> primary_expression .)
    RIGHT_OP        reduce using rule 7 (postfix_expression -> primary_expression .)
    <               reduce using rule 7 (postfix_expression -> primary_expression .)
    >               reduce using rule 7 (postfix_expression -> primary_expression .)
    LE_OP           reduce using rule 7 (postfix_expression -> primary_expression .)
    GE_OP           reduce using rule 7 (postfix_expression -> primary_expression .)
    EQ_OP           reduce using rule 7 (postfix_expression -> primary_expression .)
    NE_OP           reduce using rule 7 (postfix_expression -> primary_expression .)
    &               reduce using rule 7 (postfix_expression -> primary_expression .)
    ^               reduce using rule 7 (postfix_expression -> primary_expression .)
    |               reduce using rule 7 (postfix_expression -> primary_expression .)
    AND_OP          reduce using rule 7 (postfix_expression -> primary_expression .)
    ?               reduce using rule 7 (postfix_expression -> primary_expression .)
    OR_OP           reduce using rule 7 (postfix_expression -> primary_expression .)
    ]               reduce using rule 7 (postfix_expression -> primary_expression .)
    ;               reduce using rule 7 (postfix_expression -> primary_expression .)
    ,               reduce using rule 7 (postfix_expression -> primary_expression .)
    )               reduce using rule 7 (postfix_expression -> primary_expression .)
    :               reduce using rule 7 (postfix_expression -> primary_expression .)
    }               reduce using rule 7 (postfix_expression -> primary_expression .)
    =               reduce using rule 7 (postfix_expression -> primary_expression .)
    MUL_ASSIGN      reduce using rule 7 (postfix_expression -> primary_expression .)
    DIV_ASSIGN      reduce using rule 7 (postfix_expression -> primary_expression .)
    MOD_ASSIGN      reduce using rule 7 (postfix_expression -> primary_expression .)
    ADD_ASSIGN      reduce using rule 7 (postfix_expression -> primary_expression .)
    SUB_ASSIGN      reduce using rule 7 (postfix_expression -> primary_expression .)
    LEFT_ASSIGN     reduce using rule 7 (postfix_expression -> primary_expression .)
    RIGHT_ASSIGN    reduce using rule 7 (postfix_expression -> primary_expression .)
    AND_ASSIGN      reduce using rule 7 (postfix_expression -> primary_expression .)
    XOR_ASSIGN      reduce using rule 7 (postfix_expression -> primary_expression .)
    OR_ASSIGN       reduce using rule 7 (postfix_expression -> primary_expression .)


state 95

    (57) logical_or_expression -> logical_and_expression .
    (56) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    OR_OP           reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 57 (logical_or_expression -> logical_and_expression .)
    AND_OP          shift and go to state 182


state 96

    (137) direct_declarator -> direct_declarator [ ] .

    [               reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    (               reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    =               reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    ;               reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    ,               reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    {               reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    TYPEDEF         reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    EXTERN          reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    STATIC          reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    AUTO            reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    REGISTER        reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    VOID            reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    CHAR            reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    SHORT           reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    INT             reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    LONG            reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    FLOAT           reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    DOUBLE          reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    SIGNED          reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    UNSIGNED        reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    TYPE_NAME       reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    CONST           reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    VOLATILE        reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    ENUM            reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    STRUCT          reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    UNION           reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    )               reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)
    :               reduce using rule 137 (direct_declarator -> direct_declarator [ ] .)


state 97

    (41) relational_expression -> shift_expression .
    (39) shift_expression -> shift_expression . LEFT_OP additive_expression
    (40) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 41 (relational_expression -> shift_expression .)
    >               reduce using rule 41 (relational_expression -> shift_expression .)
    LE_OP           reduce using rule 41 (relational_expression -> shift_expression .)
    GE_OP           reduce using rule 41 (relational_expression -> shift_expression .)
    EQ_OP           reduce using rule 41 (relational_expression -> shift_expression .)
    NE_OP           reduce using rule 41 (relational_expression -> shift_expression .)
    &               reduce using rule 41 (relational_expression -> shift_expression .)
    ^               reduce using rule 41 (relational_expression -> shift_expression .)
    |               reduce using rule 41 (relational_expression -> shift_expression .)
    AND_OP          reduce using rule 41 (relational_expression -> shift_expression .)
    ?               reduce using rule 41 (relational_expression -> shift_expression .)
    OR_OP           reduce using rule 41 (relational_expression -> shift_expression .)
    ;               reduce using rule 41 (relational_expression -> shift_expression .)
    ,               reduce using rule 41 (relational_expression -> shift_expression .)
    }               reduce using rule 41 (relational_expression -> shift_expression .)
    )               reduce using rule 41 (relational_expression -> shift_expression .)
    :               reduce using rule 41 (relational_expression -> shift_expression .)
    ]               reduce using rule 41 (relational_expression -> shift_expression .)
    LEFT_OP         shift and go to state 183
    RIGHT_OP        shift and go to state 184


state 98

    (49) and_expression -> equality_expression .
    (47) equality_expression -> equality_expression . EQ_OP relational_expression
    (48) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 49 (and_expression -> equality_expression .)
    ^               reduce using rule 49 (and_expression -> equality_expression .)
    |               reduce using rule 49 (and_expression -> equality_expression .)
    AND_OP          reduce using rule 49 (and_expression -> equality_expression .)
    ?               reduce using rule 49 (and_expression -> equality_expression .)
    OR_OP           reduce using rule 49 (and_expression -> equality_expression .)
    ;               reduce using rule 49 (and_expression -> equality_expression .)
    ,               reduce using rule 49 (and_expression -> equality_expression .)
    )               reduce using rule 49 (and_expression -> equality_expression .)
    :               reduce using rule 49 (and_expression -> equality_expression .)
    ]               reduce using rule 49 (and_expression -> equality_expression .)
    }               reduce using rule 49 (and_expression -> equality_expression .)
    EQ_OP           shift and go to state 186
    NE_OP           shift and go to state 185


state 99

    (3) primary_expression -> IDENTIFIER .

    [               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 3 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ]               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 3 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 3 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    )               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    :               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    }               reduce using rule 3 (primary_expression -> IDENTIFIER .)


state 100

    (5) primary_expression -> STRING_LITERAL .

    [               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    (               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    .               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    PTR_OP          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    INC_OP          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    DEC_OP          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    *               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    /               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    %               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    +               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    -               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LEFT_OP         reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    RIGHT_OP        reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    <               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    >               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LE_OP           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    GE_OP           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    EQ_OP           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    NE_OP           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    &               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ^               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    |               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    AND_OP          reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ?               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    OR_OP           reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ]               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    =               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    MUL_ASSIGN      reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    DIV_ASSIGN      reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    MOD_ASSIGN      reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ADD_ASSIGN      reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    SUB_ASSIGN      reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    LEFT_ASSIGN     reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    RIGHT_ASSIGN    reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ;               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    ,               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    )               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    :               reduce using rule 5 (primary_expression -> STRING_LITERAL .)
    }               reduce using rule 5 (primary_expression -> STRING_LITERAL .)


state 101

    (17) unary_expression -> postfix_expression .
    (8) postfix_expression -> postfix_expression . [ expression ]
    (9) postfix_expression -> postfix_expression . ( )
    (10) postfix_expression -> postfix_expression . ( argument_expression_list )
    (11) postfix_expression -> postfix_expression . . IDENTIFIER
    (12) postfix_expression -> postfix_expression . PTR_OP IDENTIFIER
    (13) postfix_expression -> postfix_expression . INC_OP
    (14) postfix_expression -> postfix_expression . DEC_OP

    *               reduce using rule 17 (unary_expression -> postfix_expression .)
    /               reduce using rule 17 (unary_expression -> postfix_expression .)
    %               reduce using rule 17 (unary_expression -> postfix_expression .)
    +               reduce using rule 17 (unary_expression -> postfix_expression .)
    -               reduce using rule 17 (unary_expression -> postfix_expression .)
    LEFT_OP         reduce using rule 17 (unary_expression -> postfix_expression .)
    RIGHT_OP        reduce using rule 17 (unary_expression -> postfix_expression .)
    <               reduce using rule 17 (unary_expression -> postfix_expression .)
    >               reduce using rule 17 (unary_expression -> postfix_expression .)
    LE_OP           reduce using rule 17 (unary_expression -> postfix_expression .)
    GE_OP           reduce using rule 17 (unary_expression -> postfix_expression .)
    EQ_OP           reduce using rule 17 (unary_expression -> postfix_expression .)
    NE_OP           reduce using rule 17 (unary_expression -> postfix_expression .)
    &               reduce using rule 17 (unary_expression -> postfix_expression .)
    ^               reduce using rule 17 (unary_expression -> postfix_expression .)
    |               reduce using rule 17 (unary_expression -> postfix_expression .)
    AND_OP          reduce using rule 17 (unary_expression -> postfix_expression .)
    ?               reduce using rule 17 (unary_expression -> postfix_expression .)
    OR_OP           reduce using rule 17 (unary_expression -> postfix_expression .)
    ]               reduce using rule 17 (unary_expression -> postfix_expression .)
    ;               reduce using rule 17 (unary_expression -> postfix_expression .)
    ,               reduce using rule 17 (unary_expression -> postfix_expression .)
    )               reduce using rule 17 (unary_expression -> postfix_expression .)
    :               reduce using rule 17 (unary_expression -> postfix_expression .)
    }               reduce using rule 17 (unary_expression -> postfix_expression .)
    =               reduce using rule 17 (unary_expression -> postfix_expression .)
    MUL_ASSIGN      reduce using rule 17 (unary_expression -> postfix_expression .)
    DIV_ASSIGN      reduce using rule 17 (unary_expression -> postfix_expression .)
    MOD_ASSIGN      reduce using rule 17 (unary_expression -> postfix_expression .)
    ADD_ASSIGN      reduce using rule 17 (unary_expression -> postfix_expression .)
    SUB_ASSIGN      reduce using rule 17 (unary_expression -> postfix_expression .)
    LEFT_ASSIGN     reduce using rule 17 (unary_expression -> postfix_expression .)
    RIGHT_ASSIGN    reduce using rule 17 (unary_expression -> postfix_expression .)
    AND_ASSIGN      reduce using rule 17 (unary_expression -> postfix_expression .)
    XOR_ASSIGN      reduce using rule 17 (unary_expression -> postfix_expression .)
    OR_ASSIGN       reduce using rule 17 (unary_expression -> postfix_expression .)
    [               shift and go to state 192
    (               shift and go to state 191
    .               shift and go to state 188
    PTR_OP          shift and go to state 190
    INC_OP          shift and go to state 189
    DEC_OP          shift and go to state 187


state 102

    (35) additive_expression -> multiplicative_expression .
    (32) multiplicative_expression -> multiplicative_expression . * cast_expression
    (33) multiplicative_expression -> multiplicative_expression . / cast_expression
    (34) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    LEFT_OP         reduce using rule 35 (additive_expression -> multiplicative_expression .)
    RIGHT_OP        reduce using rule 35 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    LE_OP           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    GE_OP           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    EQ_OP           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    NE_OP           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    AND_OP          reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    OR_OP           reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 35 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 193
    /               shift and go to state 195
    %               shift and go to state 194


state 103

    (18) unary_expression -> INC_OP . unary_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 164

    unary_expression               shift and go to state 196
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 94
    unary_operator                 shift and go to state 90

state 104

    (136) direct_declarator -> direct_declarator [ constant_expression . ]

    ]               shift and go to state 197


state 105

    (76) constant_expression -> conditional_expression .

    ;               reduce using rule 76 (constant_expression -> conditional_expression .)
    ,               reduce using rule 76 (constant_expression -> conditional_expression .)
    :               reduce using rule 76 (constant_expression -> conditional_expression .)
    }               reduce using rule 76 (constant_expression -> conditional_expression .)
    ]               reduce using rule 76 (constant_expression -> conditional_expression .)


state 106

    (27) unary_operator -> ~ .

    (               reduce using rule 27 (unary_operator -> ~ .)
    INC_OP          reduce using rule 27 (unary_operator -> ~ .)
    DEC_OP          reduce using rule 27 (unary_operator -> ~ .)
    SIZEOF          reduce using rule 27 (unary_operator -> ~ .)
    &               reduce using rule 27 (unary_operator -> ~ .)
    *               reduce using rule 27 (unary_operator -> ~ .)
    +               reduce using rule 27 (unary_operator -> ~ .)
    -               reduce using rule 27 (unary_operator -> ~ .)
    ~               reduce using rule 27 (unary_operator -> ~ .)
    !               reduce using rule 27 (unary_operator -> ~ .)
    IDENTIFIER      reduce using rule 27 (unary_operator -> ~ .)
    CONSTANT        reduce using rule 27 (unary_operator -> ~ .)
    STRING_LITERAL  reduce using rule 27 (unary_operator -> ~ .)


state 107

    (78) declaration -> declaration_specifiers init_declarator_list ; .

    }               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    IDENTIFIER      reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    CASE            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEFAULT         reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    SWITCH          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    DO              reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    GOTO            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONTINUE        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    BREAK           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    RETURN          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    TYPEDEF         reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    EXTERN          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    STATIC          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    AUTO            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    REGISTER        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOID            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    SHORT           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    LONG            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    FLOAT           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    DOUBLE          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIGNED          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNSIGNED        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    TYPE_NAME       reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONST           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOLATILE        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    ENUM            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRUCT          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNION           reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC_OP          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEC_OP          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIZEOF          reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONSTANT        reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING_LITERAL  reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 78 (declaration -> declaration_specifiers init_declarator_list ; .)


state 108

    (86) init_declarator_list -> init_declarator_list , . init_declarator
    (87) init_declarator -> . declarator
    (88) init_declarator -> . declarator = initializer
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )

    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 14

    direct_declarator              shift and go to state 24
    init_declarator                shift and go to state 198
    declarator                     shift and go to state 112
    pointer                        shift and go to state 11

state 109

    (209) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    TYPE_NAME       reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    *               reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    IDENTIFIER      reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    (               reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 209 (function_definition -> declaration_specifiers declarator compound_statement .)


state 110

    (88) init_declarator -> declarator = . initializer
    (170) initializer -> . assignment_expression
    (171) initializer -> . { initializer_list }
    (172) initializer -> . { initializer_list , }
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 201
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    initializer                    shift and go to state 199
    and_expression                 shift and go to state 81
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 200
    multiplicative_expression      shift and go to state 102
    conditional_expression         shift and go to state 141
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98

state 111

    (208) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (189) declaration_list -> declaration_list . declaration
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (77) declaration -> . declaration_specifiers ;
    (78) declaration -> . declaration_specifiers init_declarator_list ;
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    {               shift and go to state 59
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    compound_statement             shift and go to state 202
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 32
    declaration_specifiers         shift and go to state 56
    declaration                    shift and go to state 114

state 112

    (87) init_declarator -> declarator .
    (88) init_declarator -> declarator . = initializer

    ;               reduce using rule 87 (init_declarator -> declarator .)
    ,               reduce using rule 87 (init_declarator -> declarator .)
    =               shift and go to state 110


state 113

    (210) function_definition -> declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    STATIC          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    AUTO            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    CONST           reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    *               reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    (               reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    ENUM            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    UNION           reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 210 (function_definition -> declarator declaration_list compound_statement .)


state 114

    (189) declaration_list -> declaration_list declaration .

    {               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 189 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 189 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    TYPE_NAME       reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    }               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 189 (declaration_list -> declaration_list declaration .)
    ;               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 189 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 189 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 189 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    INC_OP          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    DEC_OP          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 189 (declaration_list -> declaration_list declaration .)
    &               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    *               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    +               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    -               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    ~               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    !               reduce using rule 189 (declaration_list -> declaration_list declaration .)
    CONSTANT        reduce using rule 189 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 189 (declaration_list -> declaration_list declaration .)
    (               reduce using rule 189 (declaration_list -> declaration_list declaration .)


state 115

    (177) statement -> expression_statement .

    }               reduce using rule 177 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 177 (statement -> expression_statement .)
    CASE            reduce using rule 177 (statement -> expression_statement .)
    DEFAULT         reduce using rule 177 (statement -> expression_statement .)
    {               reduce using rule 177 (statement -> expression_statement .)
    ;               reduce using rule 177 (statement -> expression_statement .)
    IF              reduce using rule 177 (statement -> expression_statement .)
    SWITCH          reduce using rule 177 (statement -> expression_statement .)
    WHILE           reduce using rule 177 (statement -> expression_statement .)
    DO              reduce using rule 177 (statement -> expression_statement .)
    FOR             reduce using rule 177 (statement -> expression_statement .)
    GOTO            reduce using rule 177 (statement -> expression_statement .)
    CONTINUE        reduce using rule 177 (statement -> expression_statement .)
    BREAK           reduce using rule 177 (statement -> expression_statement .)
    RETURN          reduce using rule 177 (statement -> expression_statement .)
    INC_OP          reduce using rule 177 (statement -> expression_statement .)
    DEC_OP          reduce using rule 177 (statement -> expression_statement .)
    SIZEOF          reduce using rule 177 (statement -> expression_statement .)
    &               reduce using rule 177 (statement -> expression_statement .)
    *               reduce using rule 177 (statement -> expression_statement .)
    +               reduce using rule 177 (statement -> expression_statement .)
    -               reduce using rule 177 (statement -> expression_statement .)
    ~               reduce using rule 177 (statement -> expression_statement .)
    !               reduce using rule 177 (statement -> expression_statement .)
    CONSTANT        reduce using rule 177 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 177 (statement -> expression_statement .)
    (               reduce using rule 177 (statement -> expression_statement .)
    ELSE            reduce using rule 177 (statement -> expression_statement .)


state 116

    (179) statement -> iteration_statement .

    }               reduce using rule 179 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 179 (statement -> iteration_statement .)
    CASE            reduce using rule 179 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 179 (statement -> iteration_statement .)
    {               reduce using rule 179 (statement -> iteration_statement .)
    ;               reduce using rule 179 (statement -> iteration_statement .)
    IF              reduce using rule 179 (statement -> iteration_statement .)
    SWITCH          reduce using rule 179 (statement -> iteration_statement .)
    WHILE           reduce using rule 179 (statement -> iteration_statement .)
    DO              reduce using rule 179 (statement -> iteration_statement .)
    FOR             reduce using rule 179 (statement -> iteration_statement .)
    GOTO            reduce using rule 179 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 179 (statement -> iteration_statement .)
    BREAK           reduce using rule 179 (statement -> iteration_statement .)
    RETURN          reduce using rule 179 (statement -> iteration_statement .)
    INC_OP          reduce using rule 179 (statement -> iteration_statement .)
    DEC_OP          reduce using rule 179 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 179 (statement -> iteration_statement .)
    &               reduce using rule 179 (statement -> iteration_statement .)
    *               reduce using rule 179 (statement -> iteration_statement .)
    +               reduce using rule 179 (statement -> iteration_statement .)
    -               reduce using rule 179 (statement -> iteration_statement .)
    ~               reduce using rule 179 (statement -> iteration_statement .)
    !               reduce using rule 179 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 179 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 179 (statement -> iteration_statement .)
    (               reduce using rule 179 (statement -> iteration_statement .)
    ELSE            reduce using rule 179 (statement -> iteration_statement .)


state 117

    (6) primary_expression -> ( . expression )
    (30) cast_expression -> ( . type_name ) cast_expression
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (156) type_name -> . specifier_qualifier_list
    (157) type_name -> . specifier_qualifier_list abstract_declarator
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (114) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_specifier
    (116) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (117) specifier_qualifier_list -> . type_qualifier
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    ENUM            shift and go to state 22
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    unary_expression               shift and go to state 122
    struct_or_union_specifier      shift and go to state 4
    exclusive_or_expression        shift and go to state 79
    and_expression                 shift and go to state 81
    type_specifier                 shift and go to state 145
    inclusive_or_expression        shift and go to state 84
    type_name                      shift and go to state 170
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    struct_or_union                shift and go to state 37
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    enum_specifier                 shift and go to state 34
    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 171
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 172

state 118

    (201) jump_statement -> GOTO . IDENTIFIER ;

    IDENTIFIER      shift and go to state 203


state 119

    (175) statement -> labeled_statement .

    }               reduce using rule 175 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 175 (statement -> labeled_statement .)
    CASE            reduce using rule 175 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 175 (statement -> labeled_statement .)
    {               reduce using rule 175 (statement -> labeled_statement .)
    ;               reduce using rule 175 (statement -> labeled_statement .)
    IF              reduce using rule 175 (statement -> labeled_statement .)
    SWITCH          reduce using rule 175 (statement -> labeled_statement .)
    WHILE           reduce using rule 175 (statement -> labeled_statement .)
    DO              reduce using rule 175 (statement -> labeled_statement .)
    FOR             reduce using rule 175 (statement -> labeled_statement .)
    GOTO            reduce using rule 175 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 175 (statement -> labeled_statement .)
    BREAK           reduce using rule 175 (statement -> labeled_statement .)
    RETURN          reduce using rule 175 (statement -> labeled_statement .)
    INC_OP          reduce using rule 175 (statement -> labeled_statement .)
    DEC_OP          reduce using rule 175 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 175 (statement -> labeled_statement .)
    &               reduce using rule 175 (statement -> labeled_statement .)
    *               reduce using rule 175 (statement -> labeled_statement .)
    +               reduce using rule 175 (statement -> labeled_statement .)
    -               reduce using rule 175 (statement -> labeled_statement .)
    ~               reduce using rule 175 (statement -> labeled_statement .)
    !               reduce using rule 175 (statement -> labeled_statement .)
    CONSTANT        reduce using rule 175 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 175 (statement -> labeled_statement .)
    (               reduce using rule 175 (statement -> labeled_statement .)
    ELSE            reduce using rule 175 (statement -> labeled_statement .)


state 120

    (186) compound_statement -> { declaration_list . }
    (187) compound_statement -> { declaration_list . statement_list }
    (189) declaration_list -> declaration_list . declaration
    (190) statement_list -> . statement
    (191) statement_list -> . statement_list statement
    (77) declaration -> . declaration_specifiers ;
    (78) declaration -> . declaration_specifiers init_declarator_list ;
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 205
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    storage_class_specifier        shift and go to state 1
    unary_expression               shift and go to state 122
    struct_or_union_specifier      shift and go to state 4
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    type_specifier                 shift and go to state 13
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    selection_statement            shift and go to state 138
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 133
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    struct_or_union                shift and go to state 37
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    declaration_specifiers         shift and go to state 56
    declaration                    shift and go to state 114
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    enum_specifier                 shift and go to state 34
    type_qualifier                 shift and go to state 32
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    statement_list                 shift and go to state 204
    expression                     shift and go to state 128

state 121

    (204) jump_statement -> RETURN . ;
    (205) jump_statement -> RETURN . expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 206
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89
    assignment_expression          shift and go to state 139
    unary_expression               shift and go to state 122
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    and_expression                 shift and go to state 81
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    expression                     shift and go to state 207
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 94

state 122

    (62) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (29) cast_expression -> unary_expression .
    (63) assignment_operator -> . =
    (64) assignment_operator -> . MUL_ASSIGN
    (65) assignment_operator -> . DIV_ASSIGN
    (66) assignment_operator -> . MOD_ASSIGN
    (67) assignment_operator -> . ADD_ASSIGN
    (68) assignment_operator -> . SUB_ASSIGN
    (69) assignment_operator -> . LEFT_ASSIGN
    (70) assignment_operator -> . RIGHT_ASSIGN
    (71) assignment_operator -> . AND_ASSIGN
    (72) assignment_operator -> . XOR_ASSIGN
    (73) assignment_operator -> . OR_ASSIGN

    *               reduce using rule 29 (cast_expression -> unary_expression .)
    /               reduce using rule 29 (cast_expression -> unary_expression .)
    %               reduce using rule 29 (cast_expression -> unary_expression .)
    +               reduce using rule 29 (cast_expression -> unary_expression .)
    -               reduce using rule 29 (cast_expression -> unary_expression .)
    LEFT_OP         reduce using rule 29 (cast_expression -> unary_expression .)
    RIGHT_OP        reduce using rule 29 (cast_expression -> unary_expression .)
    <               reduce using rule 29 (cast_expression -> unary_expression .)
    >               reduce using rule 29 (cast_expression -> unary_expression .)
    LE_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    GE_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    EQ_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    NE_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    &               reduce using rule 29 (cast_expression -> unary_expression .)
    ^               reduce using rule 29 (cast_expression -> unary_expression .)
    |               reduce using rule 29 (cast_expression -> unary_expression .)
    AND_OP          reduce using rule 29 (cast_expression -> unary_expression .)
    ?               reduce using rule 29 (cast_expression -> unary_expression .)
    OR_OP           reduce using rule 29 (cast_expression -> unary_expression .)
    )               reduce using rule 29 (cast_expression -> unary_expression .)
    ,               reduce using rule 29 (cast_expression -> unary_expression .)
    ;               reduce using rule 29 (cast_expression -> unary_expression .)
    :               reduce using rule 29 (cast_expression -> unary_expression .)
    ]               reduce using rule 29 (cast_expression -> unary_expression .)
    }               reduce using rule 29 (cast_expression -> unary_expression .)
    =               shift and go to state 216
    MUL_ASSIGN      shift and go to state 213
    DIV_ASSIGN      shift and go to state 214
    MOD_ASSIGN      shift and go to state 209
    ADD_ASSIGN      shift and go to state 217
    SUB_ASSIGN      shift and go to state 208
    LEFT_ASSIGN     shift and go to state 215
    RIGHT_ASSIGN    shift and go to state 218
    AND_ASSIGN      shift and go to state 212
    XOR_ASSIGN      shift and go to state 210
    OR_ASSIGN       shift and go to state 211

    assignment_operator            shift and go to state 219

state 123

    (176) statement -> compound_statement .

    }               reduce using rule 176 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 176 (statement -> compound_statement .)
    CASE            reduce using rule 176 (statement -> compound_statement .)
    DEFAULT         reduce using rule 176 (statement -> compound_statement .)
    {               reduce using rule 176 (statement -> compound_statement .)
    ;               reduce using rule 176 (statement -> compound_statement .)
    IF              reduce using rule 176 (statement -> compound_statement .)
    SWITCH          reduce using rule 176 (statement -> compound_statement .)
    WHILE           reduce using rule 176 (statement -> compound_statement .)
    DO              reduce using rule 176 (statement -> compound_statement .)
    FOR             reduce using rule 176 (statement -> compound_statement .)
    GOTO            reduce using rule 176 (statement -> compound_statement .)
    CONTINUE        reduce using rule 176 (statement -> compound_statement .)
    BREAK           reduce using rule 176 (statement -> compound_statement .)
    RETURN          reduce using rule 176 (statement -> compound_statement .)
    INC_OP          reduce using rule 176 (statement -> compound_statement .)
    DEC_OP          reduce using rule 176 (statement -> compound_statement .)
    SIZEOF          reduce using rule 176 (statement -> compound_statement .)
    &               reduce using rule 176 (statement -> compound_statement .)
    *               reduce using rule 176 (statement -> compound_statement .)
    +               reduce using rule 176 (statement -> compound_statement .)
    -               reduce using rule 176 (statement -> compound_statement .)
    ~               reduce using rule 176 (statement -> compound_statement .)
    !               reduce using rule 176 (statement -> compound_statement .)
    CONSTANT        reduce using rule 176 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 176 (statement -> compound_statement .)
    (               reduce using rule 176 (statement -> compound_statement .)
    ELSE            reduce using rule 176 (statement -> compound_statement .)


state 124

    (192) expression_statement -> ; .

    }               reduce using rule 192 (expression_statement -> ; .)
    IDENTIFIER      reduce using rule 192 (expression_statement -> ; .)
    CASE            reduce using rule 192 (expression_statement -> ; .)
    DEFAULT         reduce using rule 192 (expression_statement -> ; .)
    {               reduce using rule 192 (expression_statement -> ; .)
    ;               reduce using rule 192 (expression_statement -> ; .)
    IF              reduce using rule 192 (expression_statement -> ; .)
    SWITCH          reduce using rule 192 (expression_statement -> ; .)
    WHILE           reduce using rule 192 (expression_statement -> ; .)
    DO              reduce using rule 192 (expression_statement -> ; .)
    FOR             reduce using rule 192 (expression_statement -> ; .)
    GOTO            reduce using rule 192 (expression_statement -> ; .)
    CONTINUE        reduce using rule 192 (expression_statement -> ; .)
    BREAK           reduce using rule 192 (expression_statement -> ; .)
    RETURN          reduce using rule 192 (expression_statement -> ; .)
    INC_OP          reduce using rule 192 (expression_statement -> ; .)
    DEC_OP          reduce using rule 192 (expression_statement -> ; .)
    SIZEOF          reduce using rule 192 (expression_statement -> ; .)
    &               reduce using rule 192 (expression_statement -> ; .)
    *               reduce using rule 192 (expression_statement -> ; .)
    +               reduce using rule 192 (expression_statement -> ; .)
    -               reduce using rule 192 (expression_statement -> ; .)
    ~               reduce using rule 192 (expression_statement -> ; .)
    !               reduce using rule 192 (expression_statement -> ; .)
    CONSTANT        reduce using rule 192 (expression_statement -> ; .)
    STRING_LITERAL  reduce using rule 192 (expression_statement -> ; .)
    (               reduce using rule 192 (expression_statement -> ; .)
    ELSE            reduce using rule 192 (expression_statement -> ; .)
    )               reduce using rule 192 (expression_statement -> ; .)


state 125

    (199) iteration_statement -> FOR . ( expression_statement expression_statement ) statement
    (200) iteration_statement -> FOR . ( expression_statement expression_statement expression ) statement

    (               shift and go to state 220


state 126

    (202) jump_statement -> CONTINUE . ;

    ;               shift and go to state 221


state 127

    (185) compound_statement -> { statement_list . }
    (191) statement_list -> statement_list . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 223
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 222
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 128

    (193) expression_statement -> expression . ;
    (75) expression -> expression . , assignment_expression

    ;               shift and go to state 224
    ,               shift and go to state 225


state 129

    (183) labeled_statement -> DEFAULT . : statement

    :               shift and go to state 226


state 130

    (197) iteration_statement -> WHILE . ( expression ) statement

    (               shift and go to state 227


state 131

    (182) labeled_statement -> CASE . constant_expression : statement
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_operator                 shift and go to state 90
    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    equality_expression            shift and go to state 98
    and_expression                 shift and go to state 81
    conditional_expression         shift and go to state 105
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    primary_expression             shift and go to state 94
    logical_or_expression          shift and go to state 92
    constant_expression            shift and go to state 228
    relational_expression          shift and go to state 89

state 132

    (196) selection_statement -> SWITCH . ( expression ) statement

    (               shift and go to state 229


state 133

    (190) statement_list -> statement .

    }               reduce using rule 190 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 190 (statement_list -> statement .)
    CASE            reduce using rule 190 (statement_list -> statement .)
    DEFAULT         reduce using rule 190 (statement_list -> statement .)
    {               reduce using rule 190 (statement_list -> statement .)
    ;               reduce using rule 190 (statement_list -> statement .)
    IF              reduce using rule 190 (statement_list -> statement .)
    SWITCH          reduce using rule 190 (statement_list -> statement .)
    WHILE           reduce using rule 190 (statement_list -> statement .)
    DO              reduce using rule 190 (statement_list -> statement .)
    FOR             reduce using rule 190 (statement_list -> statement .)
    GOTO            reduce using rule 190 (statement_list -> statement .)
    CONTINUE        reduce using rule 190 (statement_list -> statement .)
    BREAK           reduce using rule 190 (statement_list -> statement .)
    RETURN          reduce using rule 190 (statement_list -> statement .)
    INC_OP          reduce using rule 190 (statement_list -> statement .)
    DEC_OP          reduce using rule 190 (statement_list -> statement .)
    SIZEOF          reduce using rule 190 (statement_list -> statement .)
    &               reduce using rule 190 (statement_list -> statement .)
    *               reduce using rule 190 (statement_list -> statement .)
    +               reduce using rule 190 (statement_list -> statement .)
    -               reduce using rule 190 (statement_list -> statement .)
    ~               reduce using rule 190 (statement_list -> statement .)
    !               reduce using rule 190 (statement_list -> statement .)
    CONSTANT        reduce using rule 190 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 190 (statement_list -> statement .)
    (               reduce using rule 190 (statement_list -> statement .)


state 134

    (181) labeled_statement -> IDENTIFIER . : statement
    (3) primary_expression -> IDENTIFIER .

    :               shift and go to state 230
    [               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    (               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    .               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    PTR_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    INC_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    DEC_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    =               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 3 (primary_expression -> IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 3 (primary_expression -> IDENTIFIER .)
    AND_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 3 (primary_expression -> IDENTIFIER .)
    OR_ASSIGN       reduce using rule 3 (primary_expression -> IDENTIFIER .)
    *               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    /               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    %               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    +               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    -               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    LEFT_OP         reduce using rule 3 (primary_expression -> IDENTIFIER .)
    RIGHT_OP        reduce using rule 3 (primary_expression -> IDENTIFIER .)
    <               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    >               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    LE_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    GE_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    &               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ^               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    |               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    AND_OP          reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ?               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    OR_OP           reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ;               reduce using rule 3 (primary_expression -> IDENTIFIER .)
    ,               reduce using rule 3 (primary_expression -> IDENTIFIER .)


state 135

    (180) statement -> jump_statement .

    }               reduce using rule 180 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 180 (statement -> jump_statement .)
    CASE            reduce using rule 180 (statement -> jump_statement .)
    DEFAULT         reduce using rule 180 (statement -> jump_statement .)
    {               reduce using rule 180 (statement -> jump_statement .)
    ;               reduce using rule 180 (statement -> jump_statement .)
    IF              reduce using rule 180 (statement -> jump_statement .)
    SWITCH          reduce using rule 180 (statement -> jump_statement .)
    WHILE           reduce using rule 180 (statement -> jump_statement .)
    DO              reduce using rule 180 (statement -> jump_statement .)
    FOR             reduce using rule 180 (statement -> jump_statement .)
    GOTO            reduce using rule 180 (statement -> jump_statement .)
    CONTINUE        reduce using rule 180 (statement -> jump_statement .)
    BREAK           reduce using rule 180 (statement -> jump_statement .)
    RETURN          reduce using rule 180 (statement -> jump_statement .)
    INC_OP          reduce using rule 180 (statement -> jump_statement .)
    DEC_OP          reduce using rule 180 (statement -> jump_statement .)
    SIZEOF          reduce using rule 180 (statement -> jump_statement .)
    &               reduce using rule 180 (statement -> jump_statement .)
    *               reduce using rule 180 (statement -> jump_statement .)
    +               reduce using rule 180 (statement -> jump_statement .)
    -               reduce using rule 180 (statement -> jump_statement .)
    ~               reduce using rule 180 (statement -> jump_statement .)
    !               reduce using rule 180 (statement -> jump_statement .)
    CONSTANT        reduce using rule 180 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 180 (statement -> jump_statement .)
    (               reduce using rule 180 (statement -> jump_statement .)
    ELSE            reduce using rule 180 (statement -> jump_statement .)


state 136

    (203) jump_statement -> BREAK . ;

    ;               shift and go to state 231


state 137

    (198) iteration_statement -> DO . statement WHILE ( expression ) ;
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 232
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 138

    (178) statement -> selection_statement .

    }               reduce using rule 178 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 178 (statement -> selection_statement .)
    CASE            reduce using rule 178 (statement -> selection_statement .)
    DEFAULT         reduce using rule 178 (statement -> selection_statement .)
    {               reduce using rule 178 (statement -> selection_statement .)
    ;               reduce using rule 178 (statement -> selection_statement .)
    IF              reduce using rule 178 (statement -> selection_statement .)
    SWITCH          reduce using rule 178 (statement -> selection_statement .)
    WHILE           reduce using rule 178 (statement -> selection_statement .)
    DO              reduce using rule 178 (statement -> selection_statement .)
    FOR             reduce using rule 178 (statement -> selection_statement .)
    GOTO            reduce using rule 178 (statement -> selection_statement .)
    CONTINUE        reduce using rule 178 (statement -> selection_statement .)
    BREAK           reduce using rule 178 (statement -> selection_statement .)
    RETURN          reduce using rule 178 (statement -> selection_statement .)
    INC_OP          reduce using rule 178 (statement -> selection_statement .)
    DEC_OP          reduce using rule 178 (statement -> selection_statement .)
    SIZEOF          reduce using rule 178 (statement -> selection_statement .)
    &               reduce using rule 178 (statement -> selection_statement .)
    *               reduce using rule 178 (statement -> selection_statement .)
    +               reduce using rule 178 (statement -> selection_statement .)
    -               reduce using rule 178 (statement -> selection_statement .)
    ~               reduce using rule 178 (statement -> selection_statement .)
    !               reduce using rule 178 (statement -> selection_statement .)
    CONSTANT        reduce using rule 178 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 178 (statement -> selection_statement .)
    (               reduce using rule 178 (statement -> selection_statement .)
    ELSE            reduce using rule 178 (statement -> selection_statement .)


state 139

    (74) expression -> assignment_expression .

    ;               reduce using rule 74 (expression -> assignment_expression .)
    ,               reduce using rule 74 (expression -> assignment_expression .)
    )               reduce using rule 74 (expression -> assignment_expression .)
    ]               reduce using rule 74 (expression -> assignment_expression .)
    :               reduce using rule 74 (expression -> assignment_expression .)


state 140

    (194) selection_statement -> IF . ( expression ) statement
    (195) selection_statement -> IF . ( expression ) statement ELSE statement

    (               shift and go to state 233


state 141

    (61) assignment_expression -> conditional_expression .

    }               reduce using rule 61 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 61 (assignment_expression -> conditional_expression .)
    ;               reduce using rule 61 (assignment_expression -> conditional_expression .)
    )               reduce using rule 61 (assignment_expression -> conditional_expression .)
    :               reduce using rule 61 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 61 (assignment_expression -> conditional_expression .)


state 142

    (184) compound_statement -> { } .

    }               reduce using rule 184 (compound_statement -> { } .)
    IDENTIFIER      reduce using rule 184 (compound_statement -> { } .)
    CASE            reduce using rule 184 (compound_statement -> { } .)
    DEFAULT         reduce using rule 184 (compound_statement -> { } .)
    {               reduce using rule 184 (compound_statement -> { } .)
    ;               reduce using rule 184 (compound_statement -> { } .)
    IF              reduce using rule 184 (compound_statement -> { } .)
    SWITCH          reduce using rule 184 (compound_statement -> { } .)
    WHILE           reduce using rule 184 (compound_statement -> { } .)
    DO              reduce using rule 184 (compound_statement -> { } .)
    FOR             reduce using rule 184 (compound_statement -> { } .)
    GOTO            reduce using rule 184 (compound_statement -> { } .)
    CONTINUE        reduce using rule 184 (compound_statement -> { } .)
    BREAK           reduce using rule 184 (compound_statement -> { } .)
    RETURN          reduce using rule 184 (compound_statement -> { } .)
    INC_OP          reduce using rule 184 (compound_statement -> { } .)
    DEC_OP          reduce using rule 184 (compound_statement -> { } .)
    SIZEOF          reduce using rule 184 (compound_statement -> { } .)
    &               reduce using rule 184 (compound_statement -> { } .)
    *               reduce using rule 184 (compound_statement -> { } .)
    +               reduce using rule 184 (compound_statement -> { } .)
    -               reduce using rule 184 (compound_statement -> { } .)
    ~               reduce using rule 184 (compound_statement -> { } .)
    !               reduce using rule 184 (compound_statement -> { } .)
    CONSTANT        reduce using rule 184 (compound_statement -> { } .)
    STRING_LITERAL  reduce using rule 184 (compound_statement -> { } .)
    (               reduce using rule 184 (compound_statement -> { } .)
    ELSE            reduce using rule 184 (compound_statement -> { } .)
    TYPEDEF         reduce using rule 184 (compound_statement -> { } .)
    EXTERN          reduce using rule 184 (compound_statement -> { } .)
    STATIC          reduce using rule 184 (compound_statement -> { } .)
    AUTO            reduce using rule 184 (compound_statement -> { } .)
    REGISTER        reduce using rule 184 (compound_statement -> { } .)
    VOID            reduce using rule 184 (compound_statement -> { } .)
    CHAR            reduce using rule 184 (compound_statement -> { } .)
    SHORT           reduce using rule 184 (compound_statement -> { } .)
    INT             reduce using rule 184 (compound_statement -> { } .)
    LONG            reduce using rule 184 (compound_statement -> { } .)
    FLOAT           reduce using rule 184 (compound_statement -> { } .)
    DOUBLE          reduce using rule 184 (compound_statement -> { } .)
    SIGNED          reduce using rule 184 (compound_statement -> { } .)
    UNSIGNED        reduce using rule 184 (compound_statement -> { } .)
    TYPE_NAME       reduce using rule 184 (compound_statement -> { } .)
    CONST           reduce using rule 184 (compound_statement -> { } .)
    VOLATILE        reduce using rule 184 (compound_statement -> { } .)
    ENUM            reduce using rule 184 (compound_statement -> { } .)
    STRUCT          reduce using rule 184 (compound_statement -> { } .)
    UNION           reduce using rule 184 (compound_statement -> { } .)
    $end            reduce using rule 184 (compound_statement -> { } .)


state 143

    (106) struct_or_union_specifier -> struct_or_union IDENTIFIER { . struct_declaration_list }
    (111) struct_declaration_list -> . struct_declaration
    (112) struct_declaration_list -> . struct_declaration_list struct_declaration
    (113) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (114) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_specifier
    (116) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (117) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 145
    struct_declaration             shift and go to state 146
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 148
    struct_declaration_list        shift and go to state 234

state 144

    (107) struct_or_union_specifier -> struct_or_union { struct_declaration_list . }
    (112) struct_declaration_list -> struct_declaration_list . struct_declaration
    (113) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (114) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_specifier
    (116) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (117) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    }               shift and go to state 236
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 145
    struct_declaration             shift and go to state 235
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 148

state 145

    (114) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (115) specifier_qualifier_list -> type_specifier .
    (114) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_specifier
    (116) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (117) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    :               reduce using rule 115 (specifier_qualifier_list -> type_specifier .)
    *               reduce using rule 115 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 115 (specifier_qualifier_list -> type_specifier .)
    (               reduce using rule 115 (specifier_qualifier_list -> type_specifier .)
    [               reduce using rule 115 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 115 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 145
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 237

state 146

    (111) struct_declaration_list -> struct_declaration .

    }               reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    TYPE_NAME       reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 111 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 111 (struct_declaration_list -> struct_declaration .)


state 147

    (116) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (117) specifier_qualifier_list -> type_qualifier .
    (114) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_specifier
    (116) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (117) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    :               reduce using rule 117 (specifier_qualifier_list -> type_qualifier .)
    *               reduce using rule 117 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 117 (specifier_qualifier_list -> type_qualifier .)
    (               reduce using rule 117 (specifier_qualifier_list -> type_qualifier .)
    [               reduce using rule 117 (specifier_qualifier_list -> type_qualifier .)
    )               reduce using rule 117 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 145
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 238

state 148

    (113) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (118) struct_declarator_list -> . struct_declarator
    (119) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (120) struct_declarator -> . declarator
    (121) struct_declarator -> . : constant_expression
    (122) struct_declarator -> . declarator : constant_expression
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 241
    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 14

    struct_declarator              shift and go to state 239
    struct_declarator_list         shift and go to state 242
    direct_declarator              shift and go to state 24
    declarator                     shift and go to state 240
    pointer                        shift and go to state 11

state 149

    (124) enum_specifier -> ENUM IDENTIFIER { enumerator_list . }
    (127) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 243
    ,               shift and go to state 150


state 150

    (127) enumerator_list -> enumerator_list , . enumerator
    (128) enumerator -> . IDENTIFIER
    (129) enumerator -> . IDENTIFIER = constant_expression

    IDENTIFIER      shift and go to state 68

    enumerator                     shift and go to state 244

state 151

    (123) enum_specifier -> ENUM { enumerator_list } .

    TYPEDEF         reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    EXTERN          reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    STATIC          reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    AUTO            reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    REGISTER        reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    VOID            reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    CHAR            reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    SHORT           reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    INT             reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    LONG            reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    FLOAT           reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    DOUBLE          reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    SIGNED          reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    UNSIGNED        reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    TYPE_NAME       reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    CONST           reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    VOLATILE        reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    ENUM            reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    STRUCT          reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    UNION           reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    ;               reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    *               reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    IDENTIFIER      reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    (               reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    [               reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    ,               reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    )               reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)
    :               reduce using rule 123 (enum_specifier -> ENUM { enumerator_list } .)


state 152

    (129) enumerator -> IDENTIFIER = . constant_expression
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    equality_expression            shift and go to state 98
    and_expression                 shift and go to state 81
    unary_operator                 shift and go to state 90
    conditional_expression         shift and go to state 105
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    primary_expression             shift and go to state 94
    logical_or_expression          shift and go to state 92
    constant_expression            shift and go to state 245
    relational_expression          shift and go to state 89

state 153

    (138) direct_declarator -> direct_declarator ( parameter_type_list ) .

    [               reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    (               reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    =               reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ;               reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ,               reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    {               reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    TYPEDEF         reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    EXTERN          reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STATIC          reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    AUTO            reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    REGISTER        reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOID            reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CHAR            reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SHORT           reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    INT             reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    LONG            reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    FLOAT           reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    DOUBLE          reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    SIGNED          reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNSIGNED        reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    TYPE_NAME       reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    CONST           reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    VOLATILE        reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    ENUM            reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    STRUCT          reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    UNION           reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    )               reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)
    :               reduce using rule 138 (direct_declarator -> direct_declarator ( parameter_type_list ) .)


state 154

    (135) direct_declarator -> ( . declarator )
    (161) direct_abstract_declarator -> ( . abstract_declarator )
    (166) direct_abstract_declarator -> ( . )
    (167) direct_abstract_declarator -> ( . parameter_type_list )
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (158) abstract_declarator -> . pointer
    (159) abstract_declarator -> . direct_abstract_declarator
    (160) abstract_declarator -> . pointer direct_abstract_declarator
    (147) parameter_type_list -> . parameter_list
    (148) parameter_type_list -> . parameter_list , ELLIPSIS
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )
    (161) direct_abstract_declarator -> . ( abstract_declarator )
    (162) direct_abstract_declarator -> . [ ]
    (163) direct_abstract_declarator -> . [ constant_expression ]
    (164) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (165) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (166) direct_abstract_declarator -> . ( )
    (167) direct_abstract_declarator -> . ( parameter_type_list )
    (168) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (169) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (149) parameter_list -> . parameter_declaration
    (150) parameter_list -> . parameter_list , parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    )               shift and go to state 246
    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 154
    [               shift and go to state 158
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    parameter_list                 shift and go to state 75
    type_qualifier                 shift and go to state 32
    parameter_type_list            shift and go to state 247
    parameter_declaration          shift and go to state 72
    direct_declarator              shift and go to state 24
    abstract_declarator            shift and go to state 248
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    declaration_specifiers         shift and go to state 73
    declarator                     shift and go to state 44
    direct_abstract_declarator     shift and go to state 157
    pointer                        shift and go to state 159

state 155

    (152) parameter_declaration -> declaration_specifiers abstract_declarator .

    ,               reduce using rule 152 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    )               reduce using rule 152 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 156

    (151) parameter_declaration -> declaration_specifiers declarator .

    ,               reduce using rule 151 (parameter_declaration -> declaration_specifiers declarator .)
    )               reduce using rule 151 (parameter_declaration -> declaration_specifiers declarator .)


state 157

    (159) abstract_declarator -> direct_abstract_declarator .
    (164) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (165) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]
    (168) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (169) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    )               reduce using rule 159 (abstract_declarator -> direct_abstract_declarator .)
    ,               reduce using rule 159 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 250
    (               shift and go to state 249


state 158

    (162) direct_abstract_declarator -> [ . ]
    (163) direct_abstract_declarator -> [ . constant_expression ]
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    ]               shift and go to state 252
    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    equality_expression            shift and go to state 98
    and_expression                 shift and go to state 81
    unary_operator                 shift and go to state 90
    conditional_expression         shift and go to state 105
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    primary_expression             shift and go to state 94
    logical_or_expression          shift and go to state 92
    constant_expression            shift and go to state 251
    relational_expression          shift and go to state 89

state 159

    (132) declarator -> pointer . direct_declarator
    (158) abstract_declarator -> pointer .
    (160) abstract_declarator -> pointer . direct_abstract_declarator
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )
    (161) direct_abstract_declarator -> . ( abstract_declarator )
    (162) direct_abstract_declarator -> . [ ]
    (163) direct_abstract_declarator -> . [ constant_expression ]
    (164) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (165) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (166) direct_abstract_declarator -> . ( )
    (167) direct_abstract_declarator -> . ( parameter_type_list )
    (168) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (169) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 158 (abstract_declarator -> pointer .)
    ,               reduce using rule 158 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 154
    [               shift and go to state 158

    direct_declarator              shift and go to state 42
    direct_abstract_declarator     shift and go to state 253

state 160

    (139) direct_declarator -> direct_declarator ( identifier_list ) .

    [               reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    (               reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    =               reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ;               reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ,               reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    {               reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    TYPEDEF         reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    EXTERN          reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STATIC          reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    AUTO            reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    REGISTER        reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOID            reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CHAR            reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SHORT           reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    INT             reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    LONG            reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    FLOAT           reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    DOUBLE          reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    SIGNED          reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNSIGNED        reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    TYPE_NAME       reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    CONST           reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    VOLATILE        reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    ENUM            reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    STRUCT          reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    UNION           reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    )               reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)
    :               reduce using rule 139 (direct_declarator -> direct_declarator ( identifier_list ) .)


state 161

    (155) identifier_list -> identifier_list , . IDENTIFIER

    IDENTIFIER      shift and go to state 254


state 162

    (148) parameter_type_list -> parameter_list , . ELLIPSIS
    (150) parameter_list -> parameter_list , . parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 255
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    enum_specifier                 shift and go to state 34
    parameter_declaration          shift and go to state 256
    type_qualifier                 shift and go to state 32
    struct_or_union_specifier      shift and go to state 4
    declaration_specifiers         shift and go to state 73

state 163

    (19) unary_expression -> DEC_OP unary_expression .

    *               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    /               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    %               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    +               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    -               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    LEFT_OP         reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_OP        reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    <               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    >               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    LE_OP           reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    GE_OP           reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    EQ_OP           reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    NE_OP           reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    &               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    ^               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    |               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    AND_OP          reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    ?               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    OR_OP           reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    ]               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    ;               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    ,               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    )               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    :               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    }               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    =               reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 19 (unary_expression -> DEC_OP unary_expression .)


state 164

    (6) primary_expression -> ( . expression )
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89
    assignment_expression          shift and go to state 139
    unary_expression               shift and go to state 122
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    and_expression                 shift and go to state 81
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    expression                     shift and go to state 172
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 94

state 165

    (52) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    and_expression                 shift and go to state 257
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    equality_expression            shift and go to state 98
    primary_expression             shift and go to state 94
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89

state 166

    (21) unary_expression -> SIZEOF unary_expression .

    *               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    /               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    %               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    +               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    -               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    LEFT_OP         reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_OP        reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    <               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    >               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    LE_OP           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    GE_OP           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    EQ_OP           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    NE_OP           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    &               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ^               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    |               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    AND_OP          reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ?               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    OR_OP           reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ]               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    )               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    }               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    =               reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    MUL_ASSIGN      reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    DIV_ASSIGN      reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    MOD_ASSIGN      reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGN      reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    SUB_ASSIGN      reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    LEFT_ASSIGN     reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_ASSIGN    reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    AND_ASSIGN      reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    XOR_ASSIGN      reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)
    OR_ASSIGN       reduce using rule 21 (unary_expression -> SIZEOF unary_expression .)


state 167

    (22) unary_expression -> SIZEOF ( . type_name )
    (6) primary_expression -> ( . expression )
    (156) type_name -> . specifier_qualifier_list
    (157) type_name -> . specifier_qualifier_list abstract_declarator
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (114) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_specifier
    (116) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (117) specifier_qualifier_list -> . type_qualifier
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    ENUM            shift and go to state 22
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    struct_or_union_specifier      shift and go to state 4
    exclusive_or_expression        shift and go to state 79
    and_expression                 shift and go to state 81
    type_specifier                 shift and go to state 145
    inclusive_or_expression        shift and go to state 84
    type_name                      shift and go to state 258
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    struct_or_union                shift and go to state 37
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    enum_specifier                 shift and go to state 34
    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 171
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 172

state 168

    (50) and_expression -> and_expression & . equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    equality_expression            shift and go to state 259
    primary_expression             shift and go to state 94
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89

state 169

    (54) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    exclusive_or_expression        shift and go to state 260
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 93
    and_expression                 shift and go to state 81
    primary_expression             shift and go to state 94
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    relational_expression          shift and go to state 89

state 170

    (30) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 261


state 171

    (156) type_name -> specifier_qualifier_list .
    (157) type_name -> specifier_qualifier_list . abstract_declarator
    (158) abstract_declarator -> . pointer
    (159) abstract_declarator -> . direct_abstract_declarator
    (160) abstract_declarator -> . pointer direct_abstract_declarator
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (161) direct_abstract_declarator -> . ( abstract_declarator )
    (162) direct_abstract_declarator -> . [ ]
    (163) direct_abstract_declarator -> . [ constant_expression ]
    (164) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (165) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (166) direct_abstract_declarator -> . ( )
    (167) direct_abstract_declarator -> . ( parameter_type_list )
    (168) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (169) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 156 (type_name -> specifier_qualifier_list .)
    *               shift and go to state 6
    (               shift and go to state 262
    [               shift and go to state 158

    abstract_declarator            shift and go to state 263
    direct_abstract_declarator     shift and go to state 157
    pointer                        shift and go to state 264

state 172

    (6) primary_expression -> ( expression . )
    (75) expression -> expression . , assignment_expression

    )               shift and go to state 265
    ,               shift and go to state 225


state 173

    (44) relational_expression -> relational_expression LE_OP . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 266
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94

state 174

    (42) relational_expression -> relational_expression < . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 267
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94

state 175

    (45) relational_expression -> relational_expression GE_OP . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 268
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94

state 176

    (43) relational_expression -> relational_expression > . shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 269
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94

state 177

    (20) unary_expression -> unary_operator cast_expression .

    *               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    LEFT_OP         reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    RIGHT_OP        reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    LE_OP           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    GE_OP           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    EQ_OP           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    NE_OP           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    AND_OP          reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    OR_OP           reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    =               reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    MUL_ASSIGN      reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    DIV_ASSIGN      reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    MOD_ASSIGN      reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGN      reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    SUB_ASSIGN      reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    LEFT_ASSIGN     reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    RIGHT_ASSIGN    reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    AND_ASSIGN      reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    XOR_ASSIGN      reduce using rule 20 (unary_expression -> unary_operator cast_expression .)
    OR_ASSIGN       reduce using rule 20 (unary_expression -> unary_operator cast_expression .)


state 178

    (58) logical_or_expression -> logical_or_expression OR_OP . logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    and_expression                 shift and go to state 81
    primary_expression             shift and go to state 94
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 270
    equality_expression            shift and go to state 98
    relational_expression          shift and go to state 89

state 179

    (60) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89
    assignment_expression          shift and go to state 139
    unary_expression               shift and go to state 122
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    and_expression                 shift and go to state 81
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    expression                     shift and go to state 271
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 94

state 180

    (36) additive_expression -> additive_expression + . multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 272
    postfix_expression             shift and go to state 101
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 94

state 181

    (37) additive_expression -> additive_expression - . multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 273
    postfix_expression             shift and go to state 101
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    primary_expression             shift and go to state 94

state 182

    (56) logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 274
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    additive_expression            shift and go to state 93
    and_expression                 shift and go to state 81
    primary_expression             shift and go to state 94
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    relational_expression          shift and go to state 89

state 183

    (39) shift_expression -> shift_expression LEFT_OP . additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    additive_expression            shift and go to state 275
    primary_expression             shift and go to state 94

state 184

    (40) shift_expression -> shift_expression RIGHT_OP . additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    additive_expression            shift and go to state 276
    primary_expression             shift and go to state 94

state 185

    (48) equality_expression -> equality_expression NE_OP . relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 277
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94

state 186

    (47) equality_expression -> equality_expression EQ_OP . relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 278
    unary_operator                 shift and go to state 90
    cast_expression                shift and go to state 91
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94

state 187

    (14) postfix_expression -> postfix_expression DEC_OP .

    [               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    (               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    .               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    PTR_OP          reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    INC_OP          reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    DEC_OP          reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    *               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    /               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    %               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    +               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    -               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_OP         reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_OP        reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    <               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    >               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    LE_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    GE_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    EQ_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    NE_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    &               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    ^               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    |               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    AND_OP          reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    ?               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    OR_OP           reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    ]               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    ;               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    ,               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    )               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    :               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    }               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    =               reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    MUL_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    DIV_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    MOD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    ADD_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    SUB_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    LEFT_ASSIGN     reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    RIGHT_ASSIGN    reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    AND_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    XOR_ASSIGN      reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)
    OR_ASSIGN       reduce using rule 14 (postfix_expression -> postfix_expression DEC_OP .)


state 188

    (11) postfix_expression -> postfix_expression . . IDENTIFIER

    IDENTIFIER      shift and go to state 279


state 189

    (13) postfix_expression -> postfix_expression INC_OP .

    [               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    (               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    .               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    PTR_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    INC_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    DEC_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    *               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    /               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    %               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    +               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    -               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_OP         reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_OP        reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    <               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    >               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    LE_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    GE_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    EQ_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    NE_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    &               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    ^               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    |               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    AND_OP          reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    ?               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    OR_OP           reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    ]               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    ;               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    ,               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    )               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    :               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    }               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    =               reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    MUL_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    DIV_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    MOD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    ADD_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    SUB_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    LEFT_ASSIGN     reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    RIGHT_ASSIGN    reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    AND_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    XOR_ASSIGN      reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)
    OR_ASSIGN       reduce using rule 13 (postfix_expression -> postfix_expression INC_OP .)


state 190

    (12) postfix_expression -> postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 280


state 191

    (9) postfix_expression -> postfix_expression ( . )
    (10) postfix_expression -> postfix_expression ( . argument_expression_list )
    (15) argument_expression_list -> . assignment_expression
    (16) argument_expression_list -> . argument_expression_list , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 281
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89
    assignment_expression          shift and go to state 282
    unary_expression               shift and go to state 122
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    argument_expression_list       shift and go to state 283
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    and_expression                 shift and go to state 81
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 94

state 192

    (8) postfix_expression -> postfix_expression [ . expression ]
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89
    assignment_expression          shift and go to state 139
    unary_expression               shift and go to state 122
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    and_expression                 shift and go to state 81
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    expression                     shift and go to state 284
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 94

state 193

    (32) multiplicative_expression -> multiplicative_expression * . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 94
    cast_expression                shift and go to state 285
    unary_operator                 shift and go to state 90

state 194

    (34) multiplicative_expression -> multiplicative_expression % . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 94
    cast_expression                shift and go to state 286
    unary_operator                 shift and go to state 90

state 195

    (33) multiplicative_expression -> multiplicative_expression / . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 94
    cast_expression                shift and go to state 287
    unary_operator                 shift and go to state 90

state 196

    (18) unary_expression -> INC_OP unary_expression .

    *               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    /               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    %               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    +               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    -               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    LEFT_OP         reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    RIGHT_OP        reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    <               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    >               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    LE_OP           reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    GE_OP           reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    EQ_OP           reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    NE_OP           reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    &               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    ^               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    |               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    AND_OP          reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    ?               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    OR_OP           reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    ]               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    ;               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    ,               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    )               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    :               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    }               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    =               reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    MUL_ASSIGN      reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    DIV_ASSIGN      reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    MOD_ASSIGN      reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    ADD_ASSIGN      reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    SUB_ASSIGN      reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    LEFT_ASSIGN     reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    RIGHT_ASSIGN    reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    AND_ASSIGN      reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    XOR_ASSIGN      reduce using rule 18 (unary_expression -> INC_OP unary_expression .)
    OR_ASSIGN       reduce using rule 18 (unary_expression -> INC_OP unary_expression .)


state 197

    (136) direct_declarator -> direct_declarator [ constant_expression ] .

    [               reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    (               reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    =               reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ;               reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ,               reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    {               reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    TYPEDEF         reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    EXTERN          reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    STATIC          reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    AUTO            reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    REGISTER        reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    VOID            reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    CHAR            reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    SHORT           reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    INT             reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    LONG            reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    FLOAT           reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    DOUBLE          reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    SIGNED          reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    UNSIGNED        reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    TYPE_NAME       reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    CONST           reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    VOLATILE        reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    ENUM            reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    STRUCT          reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    UNION           reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    )               reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)
    :               reduce using rule 136 (direct_declarator -> direct_declarator [ constant_expression ] .)


state 198

    (86) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 86 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 86 (init_declarator_list -> init_declarator_list , init_declarator .)


state 199

    (88) init_declarator -> declarator = initializer .

    ;               reduce using rule 88 (init_declarator -> declarator = initializer .)
    ,               reduce using rule 88 (init_declarator -> declarator = initializer .)


state 200

    (170) initializer -> assignment_expression .

    }               reduce using rule 170 (initializer -> assignment_expression .)
    ,               reduce using rule 170 (initializer -> assignment_expression .)
    ;               reduce using rule 170 (initializer -> assignment_expression .)


state 201

    (171) initializer -> { . initializer_list }
    (172) initializer -> { . initializer_list , }
    (173) initializer_list -> . initializer
    (174) initializer_list -> . initializer_list , initializer
    (170) initializer -> . assignment_expression
    (171) initializer -> . { initializer_list }
    (172) initializer -> . { initializer_list , }
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    {               shift and go to state 201
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    initializer                    shift and go to state 288
    additive_expression            shift and go to state 93
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 200
    multiplicative_expression      shift and go to state 102
    conditional_expression         shift and go to state 141
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    initializer_list               shift and go to state 289

state 202

    (208) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    TYPE_NAME       reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    *               reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    (               reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 208 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 203

    (201) jump_statement -> GOTO IDENTIFIER . ;

    ;               shift and go to state 290


state 204

    (187) compound_statement -> { declaration_list statement_list . }
    (191) statement_list -> statement_list . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 291
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 222
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 205

    (186) compound_statement -> { declaration_list } .

    }               reduce using rule 186 (compound_statement -> { declaration_list } .)
    IDENTIFIER      reduce using rule 186 (compound_statement -> { declaration_list } .)
    CASE            reduce using rule 186 (compound_statement -> { declaration_list } .)
    DEFAULT         reduce using rule 186 (compound_statement -> { declaration_list } .)
    {               reduce using rule 186 (compound_statement -> { declaration_list } .)
    ;               reduce using rule 186 (compound_statement -> { declaration_list } .)
    IF              reduce using rule 186 (compound_statement -> { declaration_list } .)
    SWITCH          reduce using rule 186 (compound_statement -> { declaration_list } .)
    WHILE           reduce using rule 186 (compound_statement -> { declaration_list } .)
    DO              reduce using rule 186 (compound_statement -> { declaration_list } .)
    FOR             reduce using rule 186 (compound_statement -> { declaration_list } .)
    GOTO            reduce using rule 186 (compound_statement -> { declaration_list } .)
    CONTINUE        reduce using rule 186 (compound_statement -> { declaration_list } .)
    BREAK           reduce using rule 186 (compound_statement -> { declaration_list } .)
    RETURN          reduce using rule 186 (compound_statement -> { declaration_list } .)
    INC_OP          reduce using rule 186 (compound_statement -> { declaration_list } .)
    DEC_OP          reduce using rule 186 (compound_statement -> { declaration_list } .)
    SIZEOF          reduce using rule 186 (compound_statement -> { declaration_list } .)
    &               reduce using rule 186 (compound_statement -> { declaration_list } .)
    *               reduce using rule 186 (compound_statement -> { declaration_list } .)
    +               reduce using rule 186 (compound_statement -> { declaration_list } .)
    -               reduce using rule 186 (compound_statement -> { declaration_list } .)
    ~               reduce using rule 186 (compound_statement -> { declaration_list } .)
    !               reduce using rule 186 (compound_statement -> { declaration_list } .)
    CONSTANT        reduce using rule 186 (compound_statement -> { declaration_list } .)
    STRING_LITERAL  reduce using rule 186 (compound_statement -> { declaration_list } .)
    (               reduce using rule 186 (compound_statement -> { declaration_list } .)
    ELSE            reduce using rule 186 (compound_statement -> { declaration_list } .)
    TYPEDEF         reduce using rule 186 (compound_statement -> { declaration_list } .)
    EXTERN          reduce using rule 186 (compound_statement -> { declaration_list } .)
    STATIC          reduce using rule 186 (compound_statement -> { declaration_list } .)
    AUTO            reduce using rule 186 (compound_statement -> { declaration_list } .)
    REGISTER        reduce using rule 186 (compound_statement -> { declaration_list } .)
    VOID            reduce using rule 186 (compound_statement -> { declaration_list } .)
    CHAR            reduce using rule 186 (compound_statement -> { declaration_list } .)
    SHORT           reduce using rule 186 (compound_statement -> { declaration_list } .)
    INT             reduce using rule 186 (compound_statement -> { declaration_list } .)
    LONG            reduce using rule 186 (compound_statement -> { declaration_list } .)
    FLOAT           reduce using rule 186 (compound_statement -> { declaration_list } .)
    DOUBLE          reduce using rule 186 (compound_statement -> { declaration_list } .)
    SIGNED          reduce using rule 186 (compound_statement -> { declaration_list } .)
    UNSIGNED        reduce using rule 186 (compound_statement -> { declaration_list } .)
    TYPE_NAME       reduce using rule 186 (compound_statement -> { declaration_list } .)
    CONST           reduce using rule 186 (compound_statement -> { declaration_list } .)
    VOLATILE        reduce using rule 186 (compound_statement -> { declaration_list } .)
    ENUM            reduce using rule 186 (compound_statement -> { declaration_list } .)
    STRUCT          reduce using rule 186 (compound_statement -> { declaration_list } .)
    UNION           reduce using rule 186 (compound_statement -> { declaration_list } .)
    $end            reduce using rule 186 (compound_statement -> { declaration_list } .)


state 206

    (204) jump_statement -> RETURN ; .

    }               reduce using rule 204 (jump_statement -> RETURN ; .)
    IDENTIFIER      reduce using rule 204 (jump_statement -> RETURN ; .)
    CASE            reduce using rule 204 (jump_statement -> RETURN ; .)
    DEFAULT         reduce using rule 204 (jump_statement -> RETURN ; .)
    {               reduce using rule 204 (jump_statement -> RETURN ; .)
    ;               reduce using rule 204 (jump_statement -> RETURN ; .)
    IF              reduce using rule 204 (jump_statement -> RETURN ; .)
    SWITCH          reduce using rule 204 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 204 (jump_statement -> RETURN ; .)
    DO              reduce using rule 204 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 204 (jump_statement -> RETURN ; .)
    GOTO            reduce using rule 204 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 204 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 204 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 204 (jump_statement -> RETURN ; .)
    INC_OP          reduce using rule 204 (jump_statement -> RETURN ; .)
    DEC_OP          reduce using rule 204 (jump_statement -> RETURN ; .)
    SIZEOF          reduce using rule 204 (jump_statement -> RETURN ; .)
    &               reduce using rule 204 (jump_statement -> RETURN ; .)
    *               reduce using rule 204 (jump_statement -> RETURN ; .)
    +               reduce using rule 204 (jump_statement -> RETURN ; .)
    -               reduce using rule 204 (jump_statement -> RETURN ; .)
    ~               reduce using rule 204 (jump_statement -> RETURN ; .)
    !               reduce using rule 204 (jump_statement -> RETURN ; .)
    CONSTANT        reduce using rule 204 (jump_statement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 204 (jump_statement -> RETURN ; .)
    (               reduce using rule 204 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 204 (jump_statement -> RETURN ; .)


state 207

    (205) jump_statement -> RETURN expression . ;
    (75) expression -> expression . , assignment_expression

    ;               shift and go to state 292
    ,               shift and go to state 225


state 208

    (68) assignment_operator -> SUB_ASSIGN .

    INC_OP          reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    DEC_OP          reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    SIZEOF          reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    &               reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    *               reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    +               reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    -               reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    ~               reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    !               reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    IDENTIFIER      reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    CONSTANT        reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    STRING_LITERAL  reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)
    (               reduce using rule 68 (assignment_operator -> SUB_ASSIGN .)


state 209

    (66) assignment_operator -> MOD_ASSIGN .

    INC_OP          reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    DEC_OP          reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    SIZEOF          reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    &               reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    *               reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    +               reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    -               reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    ~               reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    !               reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    IDENTIFIER      reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    CONSTANT        reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    STRING_LITERAL  reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)
    (               reduce using rule 66 (assignment_operator -> MOD_ASSIGN .)


state 210

    (72) assignment_operator -> XOR_ASSIGN .

    INC_OP          reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    DEC_OP          reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    SIZEOF          reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    &               reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    *               reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    +               reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    -               reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    ~               reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    !               reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    IDENTIFIER      reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    CONSTANT        reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)
    (               reduce using rule 72 (assignment_operator -> XOR_ASSIGN .)


state 211

    (73) assignment_operator -> OR_ASSIGN .

    INC_OP          reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    DEC_OP          reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    SIZEOF          reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    &               reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    *               reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    +               reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    -               reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    ~               reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    !               reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    IDENTIFIER      reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    CONSTANT        reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 73 (assignment_operator -> OR_ASSIGN .)
    (               reduce using rule 73 (assignment_operator -> OR_ASSIGN .)


state 212

    (71) assignment_operator -> AND_ASSIGN .

    INC_OP          reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    DEC_OP          reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    SIZEOF          reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    &               reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    *               reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    +               reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    -               reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    ~               reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    !               reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    IDENTIFIER      reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    CONSTANT        reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 71 (assignment_operator -> AND_ASSIGN .)
    (               reduce using rule 71 (assignment_operator -> AND_ASSIGN .)


state 213

    (64) assignment_operator -> MUL_ASSIGN .

    INC_OP          reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    DEC_OP          reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    SIZEOF          reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    &               reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    *               reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    +               reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    -               reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    ~               reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    !               reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    IDENTIFIER      reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    CONSTANT        reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    STRING_LITERAL  reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)
    (               reduce using rule 64 (assignment_operator -> MUL_ASSIGN .)


state 214

    (65) assignment_operator -> DIV_ASSIGN .

    INC_OP          reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    DEC_OP          reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    SIZEOF          reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    &               reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    *               reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    +               reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    -               reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    ~               reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    !               reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    IDENTIFIER      reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    CONSTANT        reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    STRING_LITERAL  reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)
    (               reduce using rule 65 (assignment_operator -> DIV_ASSIGN .)


state 215

    (69) assignment_operator -> LEFT_ASSIGN .

    INC_OP          reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    DEC_OP          reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    SIZEOF          reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    &               reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    *               reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    +               reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    -               reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    ~               reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    !               reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    IDENTIFIER      reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    CONSTANT        reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)
    (               reduce using rule 69 (assignment_operator -> LEFT_ASSIGN .)


state 216

    (63) assignment_operator -> = .

    INC_OP          reduce using rule 63 (assignment_operator -> = .)
    DEC_OP          reduce using rule 63 (assignment_operator -> = .)
    SIZEOF          reduce using rule 63 (assignment_operator -> = .)
    &               reduce using rule 63 (assignment_operator -> = .)
    *               reduce using rule 63 (assignment_operator -> = .)
    +               reduce using rule 63 (assignment_operator -> = .)
    -               reduce using rule 63 (assignment_operator -> = .)
    ~               reduce using rule 63 (assignment_operator -> = .)
    !               reduce using rule 63 (assignment_operator -> = .)
    IDENTIFIER      reduce using rule 63 (assignment_operator -> = .)
    CONSTANT        reduce using rule 63 (assignment_operator -> = .)
    STRING_LITERAL  reduce using rule 63 (assignment_operator -> = .)
    (               reduce using rule 63 (assignment_operator -> = .)


state 217

    (67) assignment_operator -> ADD_ASSIGN .

    INC_OP          reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    DEC_OP          reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    SIZEOF          reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    &               reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    *               reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    +               reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    -               reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    ~               reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    !               reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    IDENTIFIER      reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    CONSTANT        reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    STRING_LITERAL  reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)
    (               reduce using rule 67 (assignment_operator -> ADD_ASSIGN .)


state 218

    (70) assignment_operator -> RIGHT_ASSIGN .

    INC_OP          reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    DEC_OP          reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    SIZEOF          reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    &               reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    *               reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    +               reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    -               reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    ~               reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    !               reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    IDENTIFIER      reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    CONSTANT        reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    STRING_LITERAL  reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)
    (               reduce using rule 70 (assignment_operator -> RIGHT_ASSIGN .)


state 219

    (62) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89
    assignment_expression          shift and go to state 293
    unary_expression               shift and go to state 122
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    and_expression                 shift and go to state 81
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 94

state 220

    (199) iteration_statement -> FOR ( . expression_statement expression_statement ) statement
    (200) iteration_statement -> FOR ( . expression_statement expression_statement expression ) statement
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 124
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 294
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    additive_expression            shift and go to state 93
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 221

    (202) jump_statement -> CONTINUE ; .

    }               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    IDENTIFIER      reduce using rule 202 (jump_statement -> CONTINUE ; .)
    CASE            reduce using rule 202 (jump_statement -> CONTINUE ; .)
    DEFAULT         reduce using rule 202 (jump_statement -> CONTINUE ; .)
    {               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 202 (jump_statement -> CONTINUE ; .)
    SWITCH          reduce using rule 202 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 202 (jump_statement -> CONTINUE ; .)
    DO              reduce using rule 202 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 202 (jump_statement -> CONTINUE ; .)
    GOTO            reduce using rule 202 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 202 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 202 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 202 (jump_statement -> CONTINUE ; .)
    INC_OP          reduce using rule 202 (jump_statement -> CONTINUE ; .)
    DEC_OP          reduce using rule 202 (jump_statement -> CONTINUE ; .)
    SIZEOF          reduce using rule 202 (jump_statement -> CONTINUE ; .)
    &               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    *               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    +               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    -               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    ~               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    !               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    CONSTANT        reduce using rule 202 (jump_statement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 202 (jump_statement -> CONTINUE ; .)
    (               reduce using rule 202 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 202 (jump_statement -> CONTINUE ; .)


state 222

    (191) statement_list -> statement_list statement .

    }               reduce using rule 191 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 191 (statement_list -> statement_list statement .)
    CASE            reduce using rule 191 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 191 (statement_list -> statement_list statement .)
    {               reduce using rule 191 (statement_list -> statement_list statement .)
    ;               reduce using rule 191 (statement_list -> statement_list statement .)
    IF              reduce using rule 191 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 191 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 191 (statement_list -> statement_list statement .)
    DO              reduce using rule 191 (statement_list -> statement_list statement .)
    FOR             reduce using rule 191 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 191 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 191 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 191 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 191 (statement_list -> statement_list statement .)
    INC_OP          reduce using rule 191 (statement_list -> statement_list statement .)
    DEC_OP          reduce using rule 191 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 191 (statement_list -> statement_list statement .)
    &               reduce using rule 191 (statement_list -> statement_list statement .)
    *               reduce using rule 191 (statement_list -> statement_list statement .)
    +               reduce using rule 191 (statement_list -> statement_list statement .)
    -               reduce using rule 191 (statement_list -> statement_list statement .)
    ~               reduce using rule 191 (statement_list -> statement_list statement .)
    !               reduce using rule 191 (statement_list -> statement_list statement .)
    CONSTANT        reduce using rule 191 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 191 (statement_list -> statement_list statement .)
    (               reduce using rule 191 (statement_list -> statement_list statement .)


state 223

    (185) compound_statement -> { statement_list } .

    }               reduce using rule 185 (compound_statement -> { statement_list } .)
    IDENTIFIER      reduce using rule 185 (compound_statement -> { statement_list } .)
    CASE            reduce using rule 185 (compound_statement -> { statement_list } .)
    DEFAULT         reduce using rule 185 (compound_statement -> { statement_list } .)
    {               reduce using rule 185 (compound_statement -> { statement_list } .)
    ;               reduce using rule 185 (compound_statement -> { statement_list } .)
    IF              reduce using rule 185 (compound_statement -> { statement_list } .)
    SWITCH          reduce using rule 185 (compound_statement -> { statement_list } .)
    WHILE           reduce using rule 185 (compound_statement -> { statement_list } .)
    DO              reduce using rule 185 (compound_statement -> { statement_list } .)
    FOR             reduce using rule 185 (compound_statement -> { statement_list } .)
    GOTO            reduce using rule 185 (compound_statement -> { statement_list } .)
    CONTINUE        reduce using rule 185 (compound_statement -> { statement_list } .)
    BREAK           reduce using rule 185 (compound_statement -> { statement_list } .)
    RETURN          reduce using rule 185 (compound_statement -> { statement_list } .)
    INC_OP          reduce using rule 185 (compound_statement -> { statement_list } .)
    DEC_OP          reduce using rule 185 (compound_statement -> { statement_list } .)
    SIZEOF          reduce using rule 185 (compound_statement -> { statement_list } .)
    &               reduce using rule 185 (compound_statement -> { statement_list } .)
    *               reduce using rule 185 (compound_statement -> { statement_list } .)
    +               reduce using rule 185 (compound_statement -> { statement_list } .)
    -               reduce using rule 185 (compound_statement -> { statement_list } .)
    ~               reduce using rule 185 (compound_statement -> { statement_list } .)
    !               reduce using rule 185 (compound_statement -> { statement_list } .)
    CONSTANT        reduce using rule 185 (compound_statement -> { statement_list } .)
    STRING_LITERAL  reduce using rule 185 (compound_statement -> { statement_list } .)
    (               reduce using rule 185 (compound_statement -> { statement_list } .)
    ELSE            reduce using rule 185 (compound_statement -> { statement_list } .)
    TYPEDEF         reduce using rule 185 (compound_statement -> { statement_list } .)
    EXTERN          reduce using rule 185 (compound_statement -> { statement_list } .)
    STATIC          reduce using rule 185 (compound_statement -> { statement_list } .)
    AUTO            reduce using rule 185 (compound_statement -> { statement_list } .)
    REGISTER        reduce using rule 185 (compound_statement -> { statement_list } .)
    VOID            reduce using rule 185 (compound_statement -> { statement_list } .)
    CHAR            reduce using rule 185 (compound_statement -> { statement_list } .)
    SHORT           reduce using rule 185 (compound_statement -> { statement_list } .)
    INT             reduce using rule 185 (compound_statement -> { statement_list } .)
    LONG            reduce using rule 185 (compound_statement -> { statement_list } .)
    FLOAT           reduce using rule 185 (compound_statement -> { statement_list } .)
    DOUBLE          reduce using rule 185 (compound_statement -> { statement_list } .)
    SIGNED          reduce using rule 185 (compound_statement -> { statement_list } .)
    UNSIGNED        reduce using rule 185 (compound_statement -> { statement_list } .)
    TYPE_NAME       reduce using rule 185 (compound_statement -> { statement_list } .)
    CONST           reduce using rule 185 (compound_statement -> { statement_list } .)
    VOLATILE        reduce using rule 185 (compound_statement -> { statement_list } .)
    ENUM            reduce using rule 185 (compound_statement -> { statement_list } .)
    STRUCT          reduce using rule 185 (compound_statement -> { statement_list } .)
    UNION           reduce using rule 185 (compound_statement -> { statement_list } .)
    $end            reduce using rule 185 (compound_statement -> { statement_list } .)


state 224

    (193) expression_statement -> expression ; .

    }               reduce using rule 193 (expression_statement -> expression ; .)
    IDENTIFIER      reduce using rule 193 (expression_statement -> expression ; .)
    CASE            reduce using rule 193 (expression_statement -> expression ; .)
    DEFAULT         reduce using rule 193 (expression_statement -> expression ; .)
    {               reduce using rule 193 (expression_statement -> expression ; .)
    ;               reduce using rule 193 (expression_statement -> expression ; .)
    IF              reduce using rule 193 (expression_statement -> expression ; .)
    SWITCH          reduce using rule 193 (expression_statement -> expression ; .)
    WHILE           reduce using rule 193 (expression_statement -> expression ; .)
    DO              reduce using rule 193 (expression_statement -> expression ; .)
    FOR             reduce using rule 193 (expression_statement -> expression ; .)
    GOTO            reduce using rule 193 (expression_statement -> expression ; .)
    CONTINUE        reduce using rule 193 (expression_statement -> expression ; .)
    BREAK           reduce using rule 193 (expression_statement -> expression ; .)
    RETURN          reduce using rule 193 (expression_statement -> expression ; .)
    INC_OP          reduce using rule 193 (expression_statement -> expression ; .)
    DEC_OP          reduce using rule 193 (expression_statement -> expression ; .)
    SIZEOF          reduce using rule 193 (expression_statement -> expression ; .)
    &               reduce using rule 193 (expression_statement -> expression ; .)
    *               reduce using rule 193 (expression_statement -> expression ; .)
    +               reduce using rule 193 (expression_statement -> expression ; .)
    -               reduce using rule 193 (expression_statement -> expression ; .)
    ~               reduce using rule 193 (expression_statement -> expression ; .)
    !               reduce using rule 193 (expression_statement -> expression ; .)
    CONSTANT        reduce using rule 193 (expression_statement -> expression ; .)
    STRING_LITERAL  reduce using rule 193 (expression_statement -> expression ; .)
    (               reduce using rule 193 (expression_statement -> expression ; .)
    ELSE            reduce using rule 193 (expression_statement -> expression ; .)
    )               reduce using rule 193 (expression_statement -> expression ; .)


state 225

    (75) expression -> expression , . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89
    assignment_expression          shift and go to state 295
    unary_expression               shift and go to state 122
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    and_expression                 shift and go to state 81
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 94

state 226

    (183) labeled_statement -> DEFAULT : . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 296
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 227

    (197) iteration_statement -> WHILE ( . expression ) statement
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    additive_expression            shift and go to state 93
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 297

state 228

    (182) labeled_statement -> CASE constant_expression . : statement

    :               shift and go to state 298


state 229

    (196) selection_statement -> SWITCH ( . expression ) statement
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    additive_expression            shift and go to state 93
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 299

state 230

    (181) labeled_statement -> IDENTIFIER : . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 300
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 231

    (203) jump_statement -> BREAK ; .

    }               reduce using rule 203 (jump_statement -> BREAK ; .)
    IDENTIFIER      reduce using rule 203 (jump_statement -> BREAK ; .)
    CASE            reduce using rule 203 (jump_statement -> BREAK ; .)
    DEFAULT         reduce using rule 203 (jump_statement -> BREAK ; .)
    {               reduce using rule 203 (jump_statement -> BREAK ; .)
    ;               reduce using rule 203 (jump_statement -> BREAK ; .)
    IF              reduce using rule 203 (jump_statement -> BREAK ; .)
    SWITCH          reduce using rule 203 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 203 (jump_statement -> BREAK ; .)
    DO              reduce using rule 203 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 203 (jump_statement -> BREAK ; .)
    GOTO            reduce using rule 203 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 203 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 203 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 203 (jump_statement -> BREAK ; .)
    INC_OP          reduce using rule 203 (jump_statement -> BREAK ; .)
    DEC_OP          reduce using rule 203 (jump_statement -> BREAK ; .)
    SIZEOF          reduce using rule 203 (jump_statement -> BREAK ; .)
    &               reduce using rule 203 (jump_statement -> BREAK ; .)
    *               reduce using rule 203 (jump_statement -> BREAK ; .)
    +               reduce using rule 203 (jump_statement -> BREAK ; .)
    -               reduce using rule 203 (jump_statement -> BREAK ; .)
    ~               reduce using rule 203 (jump_statement -> BREAK ; .)
    !               reduce using rule 203 (jump_statement -> BREAK ; .)
    CONSTANT        reduce using rule 203 (jump_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 203 (jump_statement -> BREAK ; .)
    (               reduce using rule 203 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 203 (jump_statement -> BREAK ; .)


state 232

    (198) iteration_statement -> DO statement . WHILE ( expression ) ;

    WHILE           shift and go to state 301


state 233

    (194) selection_statement -> IF ( . expression ) statement
    (195) selection_statement -> IF ( . expression ) statement ELSE statement
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    additive_expression            shift and go to state 93
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 302

state 234

    (106) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list . }
    (112) struct_declaration_list -> struct_declaration_list . struct_declaration
    (113) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (114) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (115) specifier_qualifier_list -> . type_specifier
    (116) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (117) specifier_qualifier_list -> . type_qualifier
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    }               shift and go to state 303
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 145
    struct_declaration             shift and go to state 235
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    type_qualifier                 shift and go to state 147
    specifier_qualifier_list       shift and go to state 148

state 235

    (112) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    TYPE_NAME       reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 112 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 236

    (107) struct_or_union_specifier -> struct_or_union { struct_declaration_list } .

    TYPEDEF         reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    EXTERN          reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STATIC          reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    AUTO            reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    REGISTER        reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOID            reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CHAR            reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SHORT           reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    INT             reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    LONG            reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    FLOAT           reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    DOUBLE          reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    SIGNED          reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNSIGNED        reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    TYPE_NAME       reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CONST           reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOLATILE        reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ENUM            reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STRUCT          reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    UNION           reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    *               reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    (               reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    [               reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ,               reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    )               reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    :               reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ;               reduce using rule 107 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)


state 237

    (114) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    :               reduce using rule 114 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    *               reduce using rule 114 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 114 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    (               reduce using rule 114 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    [               reduce using rule 114 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    )               reduce using rule 114 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 238

    (116) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    :               reduce using rule 116 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    *               reduce using rule 116 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 116 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    (               reduce using rule 116 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    [               reduce using rule 116 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    )               reduce using rule 116 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 239

    (118) struct_declarator_list -> struct_declarator .

    ;               reduce using rule 118 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 118 (struct_declarator_list -> struct_declarator .)


state 240

    (120) struct_declarator -> declarator .
    (122) struct_declarator -> declarator . : constant_expression

    ;               reduce using rule 120 (struct_declarator -> declarator .)
    ,               reduce using rule 120 (struct_declarator -> declarator .)
    :               shift and go to state 304


state 241

    (121) struct_declarator -> : . constant_expression
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    equality_expression            shift and go to state 98
    and_expression                 shift and go to state 81
    unary_operator                 shift and go to state 90
    conditional_expression         shift and go to state 105
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    primary_expression             shift and go to state 94
    logical_or_expression          shift and go to state 92
    constant_expression            shift and go to state 305
    relational_expression          shift and go to state 89

state 242

    (113) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (119) struct_declarator_list -> struct_declarator_list . , struct_declarator

    ;               shift and go to state 306
    ,               shift and go to state 307


state 243

    (124) enum_specifier -> ENUM IDENTIFIER { enumerator_list } .

    TYPEDEF         reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    EXTERN          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STATIC          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    AUTO            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    REGISTER        reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOID            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CHAR            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SHORT           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    INT             reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    LONG            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    FLOAT           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    DOUBLE          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    SIGNED          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNSIGNED        reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    TYPE_NAME       reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    CONST           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    VOLATILE        reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ENUM            reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    STRUCT          reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    UNION           reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ;               reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    *               reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    IDENTIFIER      reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    (               reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    [               reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    ,               reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    )               reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)
    :               reduce using rule 124 (enum_specifier -> ENUM IDENTIFIER { enumerator_list } .)


state 244

    (127) enumerator_list -> enumerator_list , enumerator .

    }               reduce using rule 127 (enumerator_list -> enumerator_list , enumerator .)
    ,               reduce using rule 127 (enumerator_list -> enumerator_list , enumerator .)


state 245

    (129) enumerator -> IDENTIFIER = constant_expression .

    }               reduce using rule 129 (enumerator -> IDENTIFIER = constant_expression .)
    ,               reduce using rule 129 (enumerator -> IDENTIFIER = constant_expression .)


state 246

    (166) direct_abstract_declarator -> ( ) .

    [               reduce using rule 166 (direct_abstract_declarator -> ( ) .)
    (               reduce using rule 166 (direct_abstract_declarator -> ( ) .)
    )               reduce using rule 166 (direct_abstract_declarator -> ( ) .)
    ,               reduce using rule 166 (direct_abstract_declarator -> ( ) .)


state 247

    (167) direct_abstract_declarator -> ( parameter_type_list . )

    )               shift and go to state 308


state 248

    (161) direct_abstract_declarator -> ( abstract_declarator . )

    )               shift and go to state 309


state 249

    (168) direct_abstract_declarator -> direct_abstract_declarator ( . )
    (169) direct_abstract_declarator -> direct_abstract_declarator ( . parameter_type_list )
    (147) parameter_type_list -> . parameter_list
    (148) parameter_type_list -> . parameter_list , ELLIPSIS
    (149) parameter_list -> . parameter_declaration
    (150) parameter_list -> . parameter_list , parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    )               shift and go to state 310
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    parameter_list                 shift and go to state 75
    parameter_type_list            shift and go to state 311
    parameter_declaration          shift and go to state 72
    type_qualifier                 shift and go to state 32
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    declaration_specifiers         shift and go to state 73

state 250

    (164) direct_abstract_declarator -> direct_abstract_declarator [ . ]
    (165) direct_abstract_declarator -> direct_abstract_declarator [ . constant_expression ]
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    ]               shift and go to state 312
    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    equality_expression            shift and go to state 98
    and_expression                 shift and go to state 81
    unary_operator                 shift and go to state 90
    conditional_expression         shift and go to state 105
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    primary_expression             shift and go to state 94
    logical_or_expression          shift and go to state 92
    constant_expression            shift and go to state 313
    relational_expression          shift and go to state 89

state 251

    (163) direct_abstract_declarator -> [ constant_expression . ]

    ]               shift and go to state 314


state 252

    (162) direct_abstract_declarator -> [ ] .

    [               reduce using rule 162 (direct_abstract_declarator -> [ ] .)
    (               reduce using rule 162 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 162 (direct_abstract_declarator -> [ ] .)
    ,               reduce using rule 162 (direct_abstract_declarator -> [ ] .)


state 253

    (160) abstract_declarator -> pointer direct_abstract_declarator .
    (164) direct_abstract_declarator -> direct_abstract_declarator . [ ]
    (165) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]
    (168) direct_abstract_declarator -> direct_abstract_declarator . ( )
    (169) direct_abstract_declarator -> direct_abstract_declarator . ( parameter_type_list )

    )               reduce using rule 160 (abstract_declarator -> pointer direct_abstract_declarator .)
    ,               reduce using rule 160 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 250
    (               shift and go to state 249


state 254

    (155) identifier_list -> identifier_list , IDENTIFIER .

    )               reduce using rule 155 (identifier_list -> identifier_list , IDENTIFIER .)
    ,               reduce using rule 155 (identifier_list -> identifier_list , IDENTIFIER .)


state 255

    (148) parameter_type_list -> parameter_list , ELLIPSIS .

    )               reduce using rule 148 (parameter_type_list -> parameter_list , ELLIPSIS .)


state 256

    (150) parameter_list -> parameter_list , parameter_declaration .

    ,               reduce using rule 150 (parameter_list -> parameter_list , parameter_declaration .)
    )               reduce using rule 150 (parameter_list -> parameter_list , parameter_declaration .)


state 257

    (52) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (50) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND_OP          reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR_OP           reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 52 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 168


state 258

    (22) unary_expression -> SIZEOF ( type_name . )

    )               shift and go to state 315


state 259

    (50) and_expression -> and_expression & equality_expression .
    (47) equality_expression -> equality_expression . EQ_OP relational_expression
    (48) equality_expression -> equality_expression . NE_OP relational_expression

    &               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    AND_OP          reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    OR_OP           reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 50 (and_expression -> and_expression & equality_expression .)
    EQ_OP           shift and go to state 186
    NE_OP           shift and go to state 185


state 260

    (54) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (52) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND_OP          reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR_OP           reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 54 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 165


state 261

    (30) cast_expression -> ( type_name ) . cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    postfix_expression             shift and go to state 101
    primary_expression             shift and go to state 94
    cast_expression                shift and go to state 316
    unary_operator                 shift and go to state 90

state 262

    (161) direct_abstract_declarator -> ( . abstract_declarator )
    (166) direct_abstract_declarator -> ( . )
    (167) direct_abstract_declarator -> ( . parameter_type_list )
    (158) abstract_declarator -> . pointer
    (159) abstract_declarator -> . direct_abstract_declarator
    (160) abstract_declarator -> . pointer direct_abstract_declarator
    (147) parameter_type_list -> . parameter_list
    (148) parameter_type_list -> . parameter_list , ELLIPSIS
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (161) direct_abstract_declarator -> . ( abstract_declarator )
    (162) direct_abstract_declarator -> . [ ]
    (163) direct_abstract_declarator -> . [ constant_expression ]
    (164) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (165) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (166) direct_abstract_declarator -> . ( )
    (167) direct_abstract_declarator -> . ( parameter_type_list )
    (168) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (169) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )
    (149) parameter_list -> . parameter_declaration
    (150) parameter_list -> . parameter_list , parameter_declaration
    (151) parameter_declaration -> . declaration_specifiers declarator
    (152) parameter_declaration -> . declaration_specifiers abstract_declarator
    (153) parameter_declaration -> . declaration_specifiers
    (79) declaration_specifiers -> . storage_class_specifier
    (80) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (81) declaration_specifiers -> . type_specifier
    (82) declaration_specifiers -> . type_specifier declaration_specifiers
    (83) declaration_specifiers -> . type_qualifier
    (84) declaration_specifiers -> . type_qualifier declaration_specifiers
    (89) storage_class_specifier -> . TYPEDEF
    (90) storage_class_specifier -> . EXTERN
    (91) storage_class_specifier -> . STATIC
    (92) storage_class_specifier -> . AUTO
    (93) storage_class_specifier -> . REGISTER
    (94) type_specifier -> . VOID
    (95) type_specifier -> . CHAR
    (96) type_specifier -> . SHORT
    (97) type_specifier -> . INT
    (98) type_specifier -> . LONG
    (99) type_specifier -> . FLOAT
    (100) type_specifier -> . DOUBLE
    (101) type_specifier -> . SIGNED
    (102) type_specifier -> . UNSIGNED
    (103) type_specifier -> . struct_or_union_specifier
    (104) type_specifier -> . enum_specifier
    (105) type_specifier -> . TYPE_NAME
    (130) type_qualifier -> . CONST
    (131) type_qualifier -> . VOLATILE
    (106) struct_or_union_specifier -> . struct_or_union IDENTIFIER { struct_declaration_list }
    (107) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (108) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (123) enum_specifier -> . ENUM { enumerator_list }
    (124) enum_specifier -> . ENUM IDENTIFIER { enumerator_list }
    (125) enum_specifier -> . ENUM IDENTIFIER
    (109) struct_or_union -> . STRUCT
    (110) struct_or_union -> . UNION

    )               shift and go to state 246
    *               shift and go to state 6
    (               shift and go to state 262
    [               shift and go to state 158
    TYPEDEF         shift and go to state 21
    EXTERN          shift and go to state 9
    STATIC          shift and go to state 8
    AUTO            shift and go to state 23
    REGISTER        shift and go to state 15
    VOID            shift and go to state 5
    CHAR            shift and go to state 7
    SHORT           shift and go to state 2
    INT             shift and go to state 30
    LONG            shift and go to state 17
    FLOAT           shift and go to state 27
    DOUBLE          shift and go to state 31
    SIGNED          shift and go to state 33
    UNSIGNED        shift and go to state 16
    TYPE_NAME       shift and go to state 10
    CONST           shift and go to state 3
    VOLATILE        shift and go to state 35
    ENUM            shift and go to state 22
    STRUCT          shift and go to state 29
    UNION           shift and go to state 18

    storage_class_specifier        shift and go to state 1
    struct_or_union                shift and go to state 37
    type_specifier                 shift and go to state 13
    parameter_list                 shift and go to state 75
    type_qualifier                 shift and go to state 32
    parameter_type_list            shift and go to state 247
    parameter_declaration          shift and go to state 72
    abstract_declarator            shift and go to state 248
    enum_specifier                 shift and go to state 34
    struct_or_union_specifier      shift and go to state 4
    declaration_specifiers         shift and go to state 73
    direct_abstract_declarator     shift and go to state 157
    pointer                        shift and go to state 264

state 263

    (157) type_name -> specifier_qualifier_list abstract_declarator .

    )               reduce using rule 157 (type_name -> specifier_qualifier_list abstract_declarator .)


state 264

    (158) abstract_declarator -> pointer .
    (160) abstract_declarator -> pointer . direct_abstract_declarator
    (161) direct_abstract_declarator -> . ( abstract_declarator )
    (162) direct_abstract_declarator -> . [ ]
    (163) direct_abstract_declarator -> . [ constant_expression ]
    (164) direct_abstract_declarator -> . direct_abstract_declarator [ ]
    (165) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (166) direct_abstract_declarator -> . ( )
    (167) direct_abstract_declarator -> . ( parameter_type_list )
    (168) direct_abstract_declarator -> . direct_abstract_declarator ( )
    (169) direct_abstract_declarator -> . direct_abstract_declarator ( parameter_type_list )

    )               reduce using rule 158 (abstract_declarator -> pointer .)
    (               shift and go to state 262
    [               shift and go to state 158

    direct_abstract_declarator     shift and go to state 253

state 265

    (6) primary_expression -> ( expression ) .

    [               reduce using rule 6 (primary_expression -> ( expression ) .)
    (               reduce using rule 6 (primary_expression -> ( expression ) .)
    .               reduce using rule 6 (primary_expression -> ( expression ) .)
    PTR_OP          reduce using rule 6 (primary_expression -> ( expression ) .)
    INC_OP          reduce using rule 6 (primary_expression -> ( expression ) .)
    DEC_OP          reduce using rule 6 (primary_expression -> ( expression ) .)
    *               reduce using rule 6 (primary_expression -> ( expression ) .)
    /               reduce using rule 6 (primary_expression -> ( expression ) .)
    %               reduce using rule 6 (primary_expression -> ( expression ) .)
    +               reduce using rule 6 (primary_expression -> ( expression ) .)
    -               reduce using rule 6 (primary_expression -> ( expression ) .)
    LEFT_OP         reduce using rule 6 (primary_expression -> ( expression ) .)
    RIGHT_OP        reduce using rule 6 (primary_expression -> ( expression ) .)
    <               reduce using rule 6 (primary_expression -> ( expression ) .)
    >               reduce using rule 6 (primary_expression -> ( expression ) .)
    LE_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    GE_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    EQ_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    NE_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    &               reduce using rule 6 (primary_expression -> ( expression ) .)
    ^               reduce using rule 6 (primary_expression -> ( expression ) .)
    |               reduce using rule 6 (primary_expression -> ( expression ) .)
    AND_OP          reduce using rule 6 (primary_expression -> ( expression ) .)
    ?               reduce using rule 6 (primary_expression -> ( expression ) .)
    OR_OP           reduce using rule 6 (primary_expression -> ( expression ) .)
    ]               reduce using rule 6 (primary_expression -> ( expression ) .)
    =               reduce using rule 6 (primary_expression -> ( expression ) .)
    MUL_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    DIV_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    MOD_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    ADD_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    SUB_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    LEFT_ASSIGN     reduce using rule 6 (primary_expression -> ( expression ) .)
    RIGHT_ASSIGN    reduce using rule 6 (primary_expression -> ( expression ) .)
    AND_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    XOR_ASSIGN      reduce using rule 6 (primary_expression -> ( expression ) .)
    OR_ASSIGN       reduce using rule 6 (primary_expression -> ( expression ) .)
    ;               reduce using rule 6 (primary_expression -> ( expression ) .)
    ,               reduce using rule 6 (primary_expression -> ( expression ) .)
    )               reduce using rule 6 (primary_expression -> ( expression ) .)
    :               reduce using rule 6 (primary_expression -> ( expression ) .)
    }               reduce using rule 6 (primary_expression -> ( expression ) .)


state 266

    (44) relational_expression -> relational_expression LE_OP shift_expression .
    (39) shift_expression -> shift_expression . LEFT_OP additive_expression
    (40) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    >               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    LE_OP           reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    GE_OP           reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    EQ_OP           reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    NE_OP           reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    &               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    ^               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    |               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    AND_OP          reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    ?               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    OR_OP           reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    ;               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    ,               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    }               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    )               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    :               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    ]               reduce using rule 44 (relational_expression -> relational_expression LE_OP shift_expression .)
    LEFT_OP         shift and go to state 183
    RIGHT_OP        shift and go to state 184


state 267

    (42) relational_expression -> relational_expression < shift_expression .
    (39) shift_expression -> shift_expression . LEFT_OP additive_expression
    (40) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    LE_OP           reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    GE_OP           reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    EQ_OP           reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    NE_OP           reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    AND_OP          reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    OR_OP           reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 42 (relational_expression -> relational_expression < shift_expression .)
    LEFT_OP         shift and go to state 183
    RIGHT_OP        shift and go to state 184


state 268

    (45) relational_expression -> relational_expression GE_OP shift_expression .
    (39) shift_expression -> shift_expression . LEFT_OP additive_expression
    (40) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    >               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    LE_OP           reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    GE_OP           reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    EQ_OP           reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    NE_OP           reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    &               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    ^               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    |               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    AND_OP          reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    ?               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    OR_OP           reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    ;               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    ,               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    }               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    )               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    :               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    ]               reduce using rule 45 (relational_expression -> relational_expression GE_OP shift_expression .)
    LEFT_OP         shift and go to state 183
    RIGHT_OP        shift and go to state 184


state 269

    (43) relational_expression -> relational_expression > shift_expression .
    (39) shift_expression -> shift_expression . LEFT_OP additive_expression
    (40) shift_expression -> shift_expression . RIGHT_OP additive_expression

    <               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    LE_OP           reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    GE_OP           reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    EQ_OP           reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    NE_OP           reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    AND_OP          reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    OR_OP           reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 43 (relational_expression -> relational_expression > shift_expression .)
    LEFT_OP         shift and go to state 183
    RIGHT_OP        shift and go to state 184


state 270

    (58) logical_or_expression -> logical_or_expression OR_OP logical_and_expression .
    (56) logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression

    ?               reduce using rule 58 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    OR_OP           reduce using rule 58 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ]               reduce using rule 58 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ,               reduce using rule 58 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    )               reduce using rule 58 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    ;               reduce using rule 58 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    }               reduce using rule 58 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    :               reduce using rule 58 (logical_or_expression -> logical_or_expression OR_OP logical_and_expression .)
    AND_OP          shift and go to state 182


state 271

    (60) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (75) expression -> expression . , assignment_expression

    :               shift and go to state 317
    ,               shift and go to state 225


state 272

    (36) additive_expression -> additive_expression + multiplicative_expression .
    (32) multiplicative_expression -> multiplicative_expression . * cast_expression
    (33) multiplicative_expression -> multiplicative_expression . / cast_expression
    (34) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    LEFT_OP         reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    RIGHT_OP        reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    LE_OP           reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    GE_OP           reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ_OP           reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    NE_OP           reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    AND_OP          reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    OR_OP           reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 36 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 193
    /               shift and go to state 195
    %               shift and go to state 194


state 273

    (37) additive_expression -> additive_expression - multiplicative_expression .
    (32) multiplicative_expression -> multiplicative_expression . * cast_expression
    (33) multiplicative_expression -> multiplicative_expression . / cast_expression
    (34) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    LEFT_OP         reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    RIGHT_OP        reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    LE_OP           reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    GE_OP           reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ_OP           reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    NE_OP           reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    AND_OP          reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    OR_OP           reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 37 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 193
    /               shift and go to state 195
    %               shift and go to state 194


state 274

    (56) logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .
    (54) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND_OP          reduce using rule 56 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ?               reduce using rule 56 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    OR_OP           reduce using rule 56 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ;               reduce using rule 56 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ,               reduce using rule 56 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    )               reduce using rule 56 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    }               reduce using rule 56 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    ]               reduce using rule 56 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    :               reduce using rule 56 (logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression .)
    |               shift and go to state 169


state 275

    (39) shift_expression -> shift_expression LEFT_OP additive_expression .
    (36) additive_expression -> additive_expression . + multiplicative_expression
    (37) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    RIGHT_OP        reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    <               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    >               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    LE_OP           reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    GE_OP           reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    EQ_OP           reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    NE_OP           reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    &               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ^               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    |               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    AND_OP          reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ?               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    OR_OP           reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ]               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ;               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    ,               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    )               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    :               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    }               reduce using rule 39 (shift_expression -> shift_expression LEFT_OP additive_expression .)
    +               shift and go to state 180
    -               shift and go to state 181


state 276

    (40) shift_expression -> shift_expression RIGHT_OP additive_expression .
    (36) additive_expression -> additive_expression . + multiplicative_expression
    (37) additive_expression -> additive_expression . - multiplicative_expression

    LEFT_OP         reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    RIGHT_OP        reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    <               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    >               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    LE_OP           reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    GE_OP           reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    EQ_OP           reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    NE_OP           reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    &               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ^               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    |               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    AND_OP          reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ?               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    OR_OP           reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ]               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ;               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    ,               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    )               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    :               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    }               reduce using rule 40 (shift_expression -> shift_expression RIGHT_OP additive_expression .)
    +               shift and go to state 180
    -               shift and go to state 181


state 277

    (48) equality_expression -> equality_expression NE_OP relational_expression .
    (42) relational_expression -> relational_expression . < shift_expression
    (43) relational_expression -> relational_expression . > shift_expression
    (44) relational_expression -> relational_expression . LE_OP shift_expression
    (45) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    NE_OP           reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    &               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    ^               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    |               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    AND_OP          reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    ?               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    OR_OP           reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    ;               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    ,               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    ]               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    )               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    :               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    }               reduce using rule 48 (equality_expression -> equality_expression NE_OP relational_expression .)
    <               shift and go to state 174
    >               shift and go to state 176
    LE_OP           shift and go to state 173
    GE_OP           shift and go to state 175


state 278

    (47) equality_expression -> equality_expression EQ_OP relational_expression .
    (42) relational_expression -> relational_expression . < shift_expression
    (43) relational_expression -> relational_expression . > shift_expression
    (44) relational_expression -> relational_expression . LE_OP shift_expression
    (45) relational_expression -> relational_expression . GE_OP shift_expression

    EQ_OP           reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    NE_OP           reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    &               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ^               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    |               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    AND_OP          reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ?               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    OR_OP           reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ;               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ,               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    ]               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    )               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    :               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    }               reduce using rule 47 (equality_expression -> equality_expression EQ_OP relational_expression .)
    <               shift and go to state 174
    >               shift and go to state 176
    LE_OP           shift and go to state 173
    GE_OP           shift and go to state 175


state 279

    (11) postfix_expression -> postfix_expression . IDENTIFIER .

    [               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    (               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    .               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    PTR_OP          reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    INC_OP          reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    DEC_OP          reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    *               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    /               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    %               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    +               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    -               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LEFT_OP         reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    RIGHT_OP        reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    <               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    >               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LE_OP           reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    GE_OP           reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    EQ_OP           reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    NE_OP           reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    &               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ^               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    |               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    AND_OP          reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ?               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    OR_OP           reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ]               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ;               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ,               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    )               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    :               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    }               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    =               reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    AND_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)
    OR_ASSIGN       reduce using rule 11 (postfix_expression -> postfix_expression . IDENTIFIER .)


state 280

    (12) postfix_expression -> postfix_expression PTR_OP IDENTIFIER .

    [               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    (               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    .               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    PTR_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    INC_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DEC_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    *               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    /               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    %               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    +               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    -               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_OP         reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_OP        reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    <               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    >               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LE_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    GE_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    EQ_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    NE_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    &               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ^               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    |               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_OP          reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ?               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_OP           reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ]               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ;               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ,               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    )               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    :               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    }               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    =               reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MUL_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    DIV_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    MOD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    ADD_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    SUB_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    LEFT_ASSIGN     reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    RIGHT_ASSIGN    reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    AND_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    XOR_ASSIGN      reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)
    OR_ASSIGN       reduce using rule 12 (postfix_expression -> postfix_expression PTR_OP IDENTIFIER .)


state 281

    (9) postfix_expression -> postfix_expression ( ) .

    [               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    (               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    .               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    PTR_OP          reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    INC_OP          reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    DEC_OP          reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    *               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    /               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    %               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    +               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    -               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    LEFT_OP         reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_OP        reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    <               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    >               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    LE_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    GE_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    EQ_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    NE_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    &               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ^               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    |               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    AND_OP          reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ?               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    OR_OP           reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ]               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ;               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ,               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    )               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    :               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    }               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    =               reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    MUL_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    DIV_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    MOD_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    ADD_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    SUB_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    LEFT_ASSIGN     reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    RIGHT_ASSIGN    reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    AND_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    XOR_ASSIGN      reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)
    OR_ASSIGN       reduce using rule 9 (postfix_expression -> postfix_expression ( ) .)


state 282

    (15) argument_expression_list -> assignment_expression .

    )               reduce using rule 15 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 15 (argument_expression_list -> assignment_expression .)


state 283

    (10) postfix_expression -> postfix_expression ( argument_expression_list . )
    (16) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 318
    ,               shift and go to state 319


state 284

    (8) postfix_expression -> postfix_expression [ expression . ]
    (75) expression -> expression . , assignment_expression

    ]               shift and go to state 320
    ,               shift and go to state 225


state 285

    (32) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LEFT_OP         reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    RIGHT_OP        reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LE_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQ_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NE_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND_OP          reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR_OP           reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 32 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 286

    (34) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LEFT_OP         reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    RIGHT_OP        reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQ_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NE_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND_OP          reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR_OP           reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 34 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 287

    (33) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LEFT_OP         reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    RIGHT_OP        reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LE_OP           reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE_OP           reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQ_OP           reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NE_OP           reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND_OP          reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR_OP           reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 33 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 288

    (173) initializer_list -> initializer .

    }               reduce using rule 173 (initializer_list -> initializer .)
    ,               reduce using rule 173 (initializer_list -> initializer .)


state 289

    (171) initializer -> { initializer_list . }
    (172) initializer -> { initializer_list . , }
    (174) initializer_list -> initializer_list . , initializer

    }               shift and go to state 321
    ,               shift and go to state 322


state 290

    (201) jump_statement -> GOTO IDENTIFIER ; .

    }               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    CASE            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    DEFAULT         reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    {               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    ;               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    IF              reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    SWITCH          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    WHILE           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    DO              reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    FOR             reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    GOTO            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    CONTINUE        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    BREAK           reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    RETURN          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    INC_OP          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    DEC_OP          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    SIZEOF          reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    &               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    *               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    +               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    -               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    ~               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    !               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    CONSTANT        reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    STRING_LITERAL  reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    (               reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)
    ELSE            reduce using rule 201 (jump_statement -> GOTO IDENTIFIER ; .)


state 291

    (187) compound_statement -> { declaration_list statement_list } .

    }               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    IDENTIFIER      reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    CASE            reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    DEFAULT         reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    {               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    ;               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    IF              reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    SWITCH          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    WHILE           reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    DO              reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    FOR             reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    GOTO            reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    CONTINUE        reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    BREAK           reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    RETURN          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    INC_OP          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    DEC_OP          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    SIZEOF          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    &               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    *               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    +               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    -               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    ~               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    !               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    CONSTANT        reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    STRING_LITERAL  reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    (               reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    ELSE            reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    TYPEDEF         reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    EXTERN          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    STATIC          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    AUTO            reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    REGISTER        reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    VOID            reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    CHAR            reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    SHORT           reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    INT             reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    LONG            reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    FLOAT           reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    DOUBLE          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    SIGNED          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    UNSIGNED        reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    TYPE_NAME       reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    CONST           reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    VOLATILE        reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    ENUM            reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    STRUCT          reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    UNION           reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)
    $end            reduce using rule 187 (compound_statement -> { declaration_list statement_list } .)


state 292

    (205) jump_statement -> RETURN expression ; .

    }               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    IDENTIFIER      reduce using rule 205 (jump_statement -> RETURN expression ; .)
    CASE            reduce using rule 205 (jump_statement -> RETURN expression ; .)
    DEFAULT         reduce using rule 205 (jump_statement -> RETURN expression ; .)
    {               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    ;               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    IF              reduce using rule 205 (jump_statement -> RETURN expression ; .)
    SWITCH          reduce using rule 205 (jump_statement -> RETURN expression ; .)
    WHILE           reduce using rule 205 (jump_statement -> RETURN expression ; .)
    DO              reduce using rule 205 (jump_statement -> RETURN expression ; .)
    FOR             reduce using rule 205 (jump_statement -> RETURN expression ; .)
    GOTO            reduce using rule 205 (jump_statement -> RETURN expression ; .)
    CONTINUE        reduce using rule 205 (jump_statement -> RETURN expression ; .)
    BREAK           reduce using rule 205 (jump_statement -> RETURN expression ; .)
    RETURN          reduce using rule 205 (jump_statement -> RETURN expression ; .)
    INC_OP          reduce using rule 205 (jump_statement -> RETURN expression ; .)
    DEC_OP          reduce using rule 205 (jump_statement -> RETURN expression ; .)
    SIZEOF          reduce using rule 205 (jump_statement -> RETURN expression ; .)
    &               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    *               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    +               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    -               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    ~               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    !               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    CONSTANT        reduce using rule 205 (jump_statement -> RETURN expression ; .)
    STRING_LITERAL  reduce using rule 205 (jump_statement -> RETURN expression ; .)
    (               reduce using rule 205 (jump_statement -> RETURN expression ; .)
    ELSE            reduce using rule 205 (jump_statement -> RETURN expression ; .)


state 293

    (62) assignment_expression -> unary_expression assignment_operator assignment_expression .

    }               reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ,               reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ;               reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    )               reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    :               reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    ]               reduce using rule 62 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 294

    (199) iteration_statement -> FOR ( expression_statement . expression_statement ) statement
    (200) iteration_statement -> FOR ( expression_statement . expression_statement expression ) statement
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    ;               shift and go to state 124
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 323
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    additive_expression            shift and go to state 93
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 295

    (75) expression -> expression , assignment_expression .

    ;               reduce using rule 75 (expression -> expression , assignment_expression .)
    ,               reduce using rule 75 (expression -> expression , assignment_expression .)
    )               reduce using rule 75 (expression -> expression , assignment_expression .)
    ]               reduce using rule 75 (expression -> expression , assignment_expression .)
    :               reduce using rule 75 (expression -> expression , assignment_expression .)


state 296

    (183) labeled_statement -> DEFAULT : statement .

    }               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    IDENTIFIER      reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    CASE            reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    DEFAULT         reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    {               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    ;               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    IF              reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    SWITCH          reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    WHILE           reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    DO              reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    FOR             reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    GOTO            reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    CONTINUE        reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    BREAK           reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    RETURN          reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    INC_OP          reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    DEC_OP          reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    SIZEOF          reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    &               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    *               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    +               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    -               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    ~               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    !               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    CONSTANT        reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    STRING_LITERAL  reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    (               reduce using rule 183 (labeled_statement -> DEFAULT : statement .)
    ELSE            reduce using rule 183 (labeled_statement -> DEFAULT : statement .)


state 297

    (197) iteration_statement -> WHILE ( expression . ) statement
    (75) expression -> expression . , assignment_expression

    )               shift and go to state 324
    ,               shift and go to state 225


state 298

    (182) labeled_statement -> CASE constant_expression : . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 325
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 299

    (196) selection_statement -> SWITCH ( expression . ) statement
    (75) expression -> expression . , assignment_expression

    )               shift and go to state 326
    ,               shift and go to state 225


state 300

    (181) labeled_statement -> IDENTIFIER : statement .

    }               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    IDENTIFIER      reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    CASE            reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    DEFAULT         reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    {               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    ;               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    IF              reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    SWITCH          reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    WHILE           reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    DO              reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    FOR             reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    GOTO            reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    CONTINUE        reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    BREAK           reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    RETURN          reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    INC_OP          reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    DEC_OP          reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    SIZEOF          reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    &               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    *               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    +               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    -               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    ~               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    !               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    CONSTANT        reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    STRING_LITERAL  reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    (               reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)
    ELSE            reduce using rule 181 (labeled_statement -> IDENTIFIER : statement .)


state 301

    (198) iteration_statement -> DO statement WHILE . ( expression ) ;

    (               shift and go to state 327


state 302

    (194) selection_statement -> IF ( expression . ) statement
    (195) selection_statement -> IF ( expression . ) statement ELSE statement
    (75) expression -> expression . , assignment_expression

    )               shift and go to state 328
    ,               shift and go to state 225


state 303

    (106) struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .

    TYPEDEF         reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    EXTERN          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STATIC          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    AUTO            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    REGISTER        reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOID            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CHAR            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SHORT           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    INT             reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    LONG            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    FLOAT           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    DOUBLE          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    SIGNED          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNSIGNED        reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    TYPE_NAME       reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    CONST           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    VOLATILE        reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ENUM            reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    STRUCT          reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    UNION           reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    *               reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    IDENTIFIER      reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    (               reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    [               reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ,               reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    )               reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    :               reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)
    ;               reduce using rule 106 (struct_or_union_specifier -> struct_or_union IDENTIFIER { struct_declaration_list } .)


state 304

    (122) struct_declarator -> declarator : . constant_expression
    (76) constant_expression -> . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    equality_expression            shift and go to state 98
    and_expression                 shift and go to state 81
    unary_operator                 shift and go to state 90
    conditional_expression         shift and go to state 105
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    primary_expression             shift and go to state 94
    logical_or_expression          shift and go to state 92
    constant_expression            shift and go to state 329
    relational_expression          shift and go to state 89

state 305

    (121) struct_declarator -> : constant_expression .

    ;               reduce using rule 121 (struct_declarator -> : constant_expression .)
    ,               reduce using rule 121 (struct_declarator -> : constant_expression .)


state 306

    (113) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SHORT           reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    LONG            reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    FLOAT           reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    DOUBLE          reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SIGNED          reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNSIGNED        reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    TYPE_NAME       reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CONST           reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOLATILE        reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    ENUM            reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNION           reduce using rule 113 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 307

    (119) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (120) struct_declarator -> . declarator
    (121) struct_declarator -> . : constant_expression
    (122) struct_declarator -> . declarator : constant_expression
    (132) declarator -> . pointer direct_declarator
    (133) declarator -> . direct_declarator
    (141) pointer -> . *
    (142) pointer -> . * type_qualifier_list
    (143) pointer -> . * pointer
    (144) pointer -> . * type_qualifier_list pointer
    (134) direct_declarator -> . IDENTIFIER
    (135) direct_declarator -> . ( declarator )
    (136) direct_declarator -> . direct_declarator [ constant_expression ]
    (137) direct_declarator -> . direct_declarator [ ]
    (138) direct_declarator -> . direct_declarator ( parameter_type_list )
    (139) direct_declarator -> . direct_declarator ( identifier_list )
    (140) direct_declarator -> . direct_declarator ( )

    :               shift and go to state 241
    *               shift and go to state 6
    IDENTIFIER      shift and go to state 19
    (               shift and go to state 14

    struct_declarator              shift and go to state 330
    direct_declarator              shift and go to state 24
    declarator                     shift and go to state 240
    pointer                        shift and go to state 11

state 308

    (167) direct_abstract_declarator -> ( parameter_type_list ) .

    [               reduce using rule 167 (direct_abstract_declarator -> ( parameter_type_list ) .)
    (               reduce using rule 167 (direct_abstract_declarator -> ( parameter_type_list ) .)
    )               reduce using rule 167 (direct_abstract_declarator -> ( parameter_type_list ) .)
    ,               reduce using rule 167 (direct_abstract_declarator -> ( parameter_type_list ) .)


state 309

    (161) direct_abstract_declarator -> ( abstract_declarator ) .

    [               reduce using rule 161 (direct_abstract_declarator -> ( abstract_declarator ) .)
    (               reduce using rule 161 (direct_abstract_declarator -> ( abstract_declarator ) .)
    )               reduce using rule 161 (direct_abstract_declarator -> ( abstract_declarator ) .)
    ,               reduce using rule 161 (direct_abstract_declarator -> ( abstract_declarator ) .)


state 310

    (168) direct_abstract_declarator -> direct_abstract_declarator ( ) .

    [               reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    (               reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    )               reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)
    ,               reduce using rule 168 (direct_abstract_declarator -> direct_abstract_declarator ( ) .)


state 311

    (169) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list . )

    )               shift and go to state 331


state 312

    (164) direct_abstract_declarator -> direct_abstract_declarator [ ] .

    [               reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    (               reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    )               reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)
    ,               reduce using rule 164 (direct_abstract_declarator -> direct_abstract_declarator [ ] .)


state 313

    (165) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression . ]

    ]               shift and go to state 332


state 314

    (163) direct_abstract_declarator -> [ constant_expression ] .

    [               reduce using rule 163 (direct_abstract_declarator -> [ constant_expression ] .)
    (               reduce using rule 163 (direct_abstract_declarator -> [ constant_expression ] .)
    )               reduce using rule 163 (direct_abstract_declarator -> [ constant_expression ] .)
    ,               reduce using rule 163 (direct_abstract_declarator -> [ constant_expression ] .)


state 315

    (22) unary_expression -> SIZEOF ( type_name ) .

    *               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    /               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    %               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    +               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    -               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_OP         reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_OP        reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    <               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    >               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    LE_OP           reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    GE_OP           reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    EQ_OP           reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    NE_OP           reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    &               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ^               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    |               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    AND_OP          reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ?               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    OR_OP           reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ]               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ;               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ,               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    )               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    :               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    }               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    =               reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    MUL_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    DIV_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    MOD_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    ADD_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    SUB_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    LEFT_ASSIGN     reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    RIGHT_ASSIGN    reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    AND_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    XOR_ASSIGN      reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)
    OR_ASSIGN       reduce using rule 22 (unary_expression -> SIZEOF ( type_name ) .)


state 316

    (30) cast_expression -> ( type_name ) cast_expression .

    *               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    /               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    %               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    +               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    -               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_OP         reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_OP        reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    <               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    >               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    LE_OP           reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    GE_OP           reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    EQ_OP           reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    NE_OP           reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    &               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ^               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    |               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    AND_OP          reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ?               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    OR_OP           reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    )               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ,               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ]               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ;               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    :               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    }               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    =               reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    MUL_ASSIGN      reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    DIV_ASSIGN      reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    MOD_ASSIGN      reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    ADD_ASSIGN      reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    SUB_ASSIGN      reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    LEFT_ASSIGN     reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    RIGHT_ASSIGN    reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    AND_ASSIGN      reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    XOR_ASSIGN      reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)
    OR_ASSIGN       reduce using rule 30 (cast_expression -> ( type_name ) cast_expression .)


state 317

    (60) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )

    (               shift and go to state 85
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100

    unary_expression               shift and go to state 77
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    additive_expression            shift and go to state 93
    equality_expression            shift and go to state 98
    unary_operator                 shift and go to state 90
    conditional_expression         shift and go to state 333
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    primary_expression             shift and go to state 94
    logical_or_expression          shift and go to state 92
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89

state 318

    (10) postfix_expression -> postfix_expression ( argument_expression_list ) .

    [               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    (               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    .               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    PTR_OP          reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    INC_OP          reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DEC_OP          reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    *               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    /               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    %               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    +               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    -               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_OP         reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_OP        reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    <               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    >               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LE_OP           reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    GE_OP           reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    EQ_OP           reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    NE_OP           reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    &               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ^               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    |               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_OP          reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ?               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_OP           reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ]               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ;               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ,               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    )               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    :               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    }               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    =               reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MUL_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    DIV_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    MOD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    ADD_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    SUB_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    LEFT_ASSIGN     reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    RIGHT_ASSIGN    reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    AND_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    XOR_ASSIGN      reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)
    OR_ASSIGN       reduce using rule 10 (postfix_expression -> postfix_expression ( argument_expression_list ) .)


state 319

    (16) argument_expression_list -> argument_expression_list , . assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    additive_expression            shift and go to state 93
    relational_expression          shift and go to state 89
    assignment_expression          shift and go to state 334
    unary_expression               shift and go to state 122
    multiplicative_expression      shift and go to state 102
    inclusive_or_expression        shift and go to state 84
    exclusive_or_expression        shift and go to state 79
    postfix_expression             shift and go to state 101
    shift_expression               shift and go to state 97
    and_expression                 shift and go to state 81
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    cast_expression                shift and go to state 91
    logical_and_expression         shift and go to state 95
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    primary_expression             shift and go to state 94

state 320

    (8) postfix_expression -> postfix_expression [ expression ] .

    [               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    (               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    .               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    PTR_OP          reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    INC_OP          reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    DEC_OP          reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    *               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    /               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    %               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    +               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    -               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_OP         reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_OP        reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    <               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    >               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    LE_OP           reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    GE_OP           reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    EQ_OP           reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    NE_OP           reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    &               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ^               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    |               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    AND_OP          reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ?               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    OR_OP           reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ]               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ;               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ,               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    )               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    :               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    }               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    =               reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    MUL_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    DIV_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    MOD_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    ADD_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    SUB_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    LEFT_ASSIGN     reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    RIGHT_ASSIGN    reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    AND_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    XOR_ASSIGN      reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)
    OR_ASSIGN       reduce using rule 8 (postfix_expression -> postfix_expression [ expression ] .)


state 321

    (171) initializer -> { initializer_list } .

    }               reduce using rule 171 (initializer -> { initializer_list } .)
    ,               reduce using rule 171 (initializer -> { initializer_list } .)
    ;               reduce using rule 171 (initializer -> { initializer_list } .)


state 322

    (172) initializer -> { initializer_list , . }
    (174) initializer_list -> initializer_list , . initializer
    (170) initializer -> . assignment_expression
    (171) initializer -> . { initializer_list }
    (172) initializer -> . { initializer_list , }
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    }               shift and go to state 336
    {               shift and go to state 201
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    initializer                    shift and go to state 335
    additive_expression            shift and go to state 93
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 200
    multiplicative_expression      shift and go to state 102
    conditional_expression         shift and go to state 141
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98

state 323

    (199) iteration_statement -> FOR ( expression_statement expression_statement . ) statement
    (200) iteration_statement -> FOR ( expression_statement expression_statement . expression ) statement
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    )               shift and go to state 337
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    additive_expression            shift and go to state 93
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 338

state 324

    (197) iteration_statement -> WHILE ( expression ) . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 339
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 325

    (182) labeled_statement -> CASE constant_expression : statement .

    }               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    IDENTIFIER      reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    CASE            reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    DEFAULT         reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    {               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    ;               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    IF              reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    SWITCH          reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    WHILE           reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    DO              reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    FOR             reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    GOTO            reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    CONTINUE        reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    BREAK           reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    RETURN          reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    INC_OP          reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    DEC_OP          reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    SIZEOF          reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    &               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    *               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    +               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    -               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    ~               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    !               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    CONSTANT        reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    STRING_LITERAL  reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    (               reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)
    ELSE            reduce using rule 182 (labeled_statement -> CASE constant_expression : statement .)


state 326

    (196) selection_statement -> SWITCH ( expression ) . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 340
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 327

    (198) iteration_statement -> DO statement WHILE ( . expression ) ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    IDENTIFIER      shift and go to state 99
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    additive_expression            shift and go to state 93
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    and_expression                 shift and go to state 81
    relational_expression          shift and go to state 89
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 341

state 328

    (194) selection_statement -> IF ( expression ) . statement
    (195) selection_statement -> IF ( expression ) . statement ELSE statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 342
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 329

    (122) struct_declarator -> declarator : constant_expression .

    ;               reduce using rule 122 (struct_declarator -> declarator : constant_expression .)
    ,               reduce using rule 122 (struct_declarator -> declarator : constant_expression .)


state 330

    (119) struct_declarator_list -> struct_declarator_list , struct_declarator .

    ;               reduce using rule 119 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 119 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 331

    (169) direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .

    [               reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    (               reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    )               reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)
    ,               reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator ( parameter_type_list ) .)


state 332

    (165) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .

    [               reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    (               reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    )               reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    ,               reduce using rule 165 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)


state 333

    (60) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    ;               reduce using rule 60 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 60 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 60 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 60 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ]               reduce using rule 60 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    }               reduce using rule 60 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


state 334

    (16) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 16 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 16 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 335

    (174) initializer_list -> initializer_list , initializer .

    }               reduce using rule 174 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 174 (initializer_list -> initializer_list , initializer .)


state 336

    (172) initializer -> { initializer_list , } .

    }               reduce using rule 172 (initializer -> { initializer_list , } .)
    ,               reduce using rule 172 (initializer -> { initializer_list , } .)
    ;               reduce using rule 172 (initializer -> { initializer_list , } .)


state 337

    (199) iteration_statement -> FOR ( expression_statement expression_statement ) . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 343
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 338

    (200) iteration_statement -> FOR ( expression_statement expression_statement expression . ) statement
    (75) expression -> expression . , assignment_expression

    )               shift and go to state 344
    ,               shift and go to state 225


state 339

    (197) iteration_statement -> WHILE ( expression ) statement .

    }               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    IDENTIFIER      reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    CASE            reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    DEFAULT         reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    SWITCH          reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    DO              reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    GOTO            reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    INC_OP          reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    DEC_OP          reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    SIZEOF          reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    &               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    *               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    +               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    ~               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    !               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    CONSTANT        reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    STRING_LITERAL  reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 197 (iteration_statement -> WHILE ( expression ) statement .)


state 340

    (196) selection_statement -> SWITCH ( expression ) statement .

    }               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    IDENTIFIER      reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    CASE            reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    DEFAULT         reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    {               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    ;               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    IF              reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    SWITCH          reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    WHILE           reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    DO              reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    FOR             reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    GOTO            reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    CONTINUE        reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    BREAK           reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    RETURN          reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    INC_OP          reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    DEC_OP          reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    SIZEOF          reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    &               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    *               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    +               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    -               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    ~               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    !               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    CONSTANT        reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    STRING_LITERAL  reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    (               reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)
    ELSE            reduce using rule 196 (selection_statement -> SWITCH ( expression ) statement .)


state 341

    (198) iteration_statement -> DO statement WHILE ( expression . ) ;
    (75) expression -> expression . , assignment_expression

    )               shift and go to state 345
    ,               shift and go to state 225


state 342

    (194) selection_statement -> IF ( expression ) statement .
    (195) selection_statement -> IF ( expression ) statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    }               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    IDENTIFIER      reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    CASE            reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    DEFAULT         reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    {               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    ;               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    IF              reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    SWITCH          reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    DO              reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    GOTO            reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    INC_OP          reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    DEC_OP          reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    SIZEOF          reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    &               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    *               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    +               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    -               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    ~               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    !               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    CONSTANT        reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    STRING_LITERAL  reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    (               reduce using rule 194 (selection_statement -> IF ( expression ) statement .)
    ELSE            shift and go to state 346

  ! ELSE            [ reduce using rule 194 (selection_statement -> IF ( expression ) statement .) ]


state 343

    (199) iteration_statement -> FOR ( expression_statement expression_statement ) statement .

    }               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IDENTIFIER      reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CASE            reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEFAULT         reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    {               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ;               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IF              reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SWITCH          reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    WHILE           reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DO              reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FOR             reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    GOTO            reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONTINUE        reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BREAK           reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RETURN          reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INC_OP          reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEC_OP          reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIZEOF          reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    &               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    *               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    +               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    -               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ~               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    !               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONSTANT        reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    (               reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ELSE            reduce using rule 199 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)


state 344

    (200) iteration_statement -> FOR ( expression_statement expression_statement expression ) . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 347
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 345

    (198) iteration_statement -> DO statement WHILE ( expression ) . ;

    ;               shift and go to state 348


state 346

    (195) selection_statement -> IF ( expression ) statement ELSE . statement
    (175) statement -> . labeled_statement
    (176) statement -> . compound_statement
    (177) statement -> . expression_statement
    (178) statement -> . selection_statement
    (179) statement -> . iteration_statement
    (180) statement -> . jump_statement
    (181) labeled_statement -> . IDENTIFIER : statement
    (182) labeled_statement -> . CASE constant_expression : statement
    (183) labeled_statement -> . DEFAULT : statement
    (184) compound_statement -> . { }
    (185) compound_statement -> . { statement_list }
    (186) compound_statement -> . { declaration_list }
    (187) compound_statement -> . { declaration_list statement_list }
    (192) expression_statement -> . ;
    (193) expression_statement -> . expression ;
    (194) selection_statement -> . IF ( expression ) statement
    (195) selection_statement -> . IF ( expression ) statement ELSE statement
    (196) selection_statement -> . SWITCH ( expression ) statement
    (197) iteration_statement -> . WHILE ( expression ) statement
    (198) iteration_statement -> . DO statement WHILE ( expression ) ;
    (199) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (200) iteration_statement -> . FOR ( expression_statement expression_statement expression ) statement
    (201) jump_statement -> . GOTO IDENTIFIER ;
    (202) jump_statement -> . CONTINUE ;
    (203) jump_statement -> . BREAK ;
    (204) jump_statement -> . RETURN ;
    (205) jump_statement -> . RETURN expression ;
    (74) expression -> . assignment_expression
    (75) expression -> . expression , assignment_expression
    (61) assignment_expression -> . conditional_expression
    (62) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (59) conditional_expression -> . logical_or_expression
    (60) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (17) unary_expression -> . postfix_expression
    (18) unary_expression -> . INC_OP unary_expression
    (19) unary_expression -> . DEC_OP unary_expression
    (20) unary_expression -> . unary_operator cast_expression
    (21) unary_expression -> . SIZEOF unary_expression
    (22) unary_expression -> . SIZEOF ( type_name )
    (57) logical_or_expression -> . logical_and_expression
    (58) logical_or_expression -> . logical_or_expression OR_OP logical_and_expression
    (7) postfix_expression -> . primary_expression
    (8) postfix_expression -> . postfix_expression [ expression ]
    (9) postfix_expression -> . postfix_expression ( )
    (10) postfix_expression -> . postfix_expression ( argument_expression_list )
    (11) postfix_expression -> . postfix_expression . IDENTIFIER
    (12) postfix_expression -> . postfix_expression PTR_OP IDENTIFIER
    (13) postfix_expression -> . postfix_expression INC_OP
    (14) postfix_expression -> . postfix_expression DEC_OP
    (23) unary_operator -> . &
    (24) unary_operator -> . *
    (25) unary_operator -> . +
    (26) unary_operator -> . -
    (27) unary_operator -> . ~
    (28) unary_operator -> . !
    (55) logical_and_expression -> . inclusive_or_expression
    (56) logical_and_expression -> . logical_and_expression AND_OP inclusive_or_expression
    (3) primary_expression -> . IDENTIFIER
    (4) primary_expression -> . CONSTANT
    (5) primary_expression -> . STRING_LITERAL
    (6) primary_expression -> . ( expression )
    (53) inclusive_or_expression -> . exclusive_or_expression
    (54) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (51) exclusive_or_expression -> . and_expression
    (52) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (49) and_expression -> . equality_expression
    (50) and_expression -> . and_expression & equality_expression
    (46) equality_expression -> . relational_expression
    (47) equality_expression -> . equality_expression EQ_OP relational_expression
    (48) equality_expression -> . equality_expression NE_OP relational_expression
    (41) relational_expression -> . shift_expression
    (42) relational_expression -> . relational_expression < shift_expression
    (43) relational_expression -> . relational_expression > shift_expression
    (44) relational_expression -> . relational_expression LE_OP shift_expression
    (45) relational_expression -> . relational_expression GE_OP shift_expression
    (38) shift_expression -> . additive_expression
    (39) shift_expression -> . shift_expression LEFT_OP additive_expression
    (40) shift_expression -> . shift_expression RIGHT_OP additive_expression
    (35) additive_expression -> . multiplicative_expression
    (36) additive_expression -> . additive_expression + multiplicative_expression
    (37) additive_expression -> . additive_expression - multiplicative_expression
    (31) multiplicative_expression -> . cast_expression
    (32) multiplicative_expression -> . multiplicative_expression * cast_expression
    (33) multiplicative_expression -> . multiplicative_expression / cast_expression
    (34) multiplicative_expression -> . multiplicative_expression % cast_expression
    (29) cast_expression -> . unary_expression
    (30) cast_expression -> . ( type_name ) cast_expression

    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 131
    DEFAULT         shift and go to state 129
    {               shift and go to state 59
    ;               shift and go to state 124
    IF              shift and go to state 140
    SWITCH          shift and go to state 132
    WHILE           shift and go to state 130
    DO              shift and go to state 137
    FOR             shift and go to state 125
    GOTO            shift and go to state 118
    CONTINUE        shift and go to state 126
    BREAK           shift and go to state 136
    RETURN          shift and go to state 121
    INC_OP          shift and go to state 103
    DEC_OP          shift and go to state 78
    SIZEOF          shift and go to state 80
    &               shift and go to state 83
    *               shift and go to state 87
    +               shift and go to state 86
    -               shift and go to state 88
    ~               shift and go to state 106
    !               shift and go to state 82
    CONSTANT        shift and go to state 76
    STRING_LITERAL  shift and go to state 100
    (               shift and go to state 117

    expression_statement           shift and go to state 115
    selection_statement            shift and go to state 138
    unary_expression               shift and go to state 122
    exclusive_or_expression        shift and go to state 79
    iteration_statement            shift and go to state 116
    and_expression                 shift and go to state 81
    compound_statement             shift and go to state 123
    inclusive_or_expression        shift and go to state 84
    postfix_expression             shift and go to state 101
    relational_expression          shift and go to state 89
    statement                      shift and go to state 349
    cast_expression                shift and go to state 91
    logical_or_expression          shift and go to state 92
    unary_operator                 shift and go to state 90
    assignment_expression          shift and go to state 139
    multiplicative_expression      shift and go to state 102
    additive_expression            shift and go to state 93
    primary_expression             shift and go to state 94
    logical_and_expression         shift and go to state 95
    shift_expression               shift and go to state 97
    equality_expression            shift and go to state 98
    jump_statement                 shift and go to state 135
    labeled_statement              shift and go to state 119
    conditional_expression         shift and go to state 141
    expression                     shift and go to state 128

state 347

    (200) iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .

    }               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IDENTIFIER      reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CASE            reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEFAULT         reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    {               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ;               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    IF              reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SWITCH          reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    WHILE           reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DO              reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    FOR             reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    GOTO            reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONTINUE        reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    BREAK           reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    RETURN          reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    INC_OP          reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    DEC_OP          reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    SIZEOF          reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    &               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    *               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    +               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    -               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ~               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    !               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    CONSTANT        reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    STRING_LITERAL  reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    (               reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)
    ELSE            reduce using rule 200 (iteration_statement -> FOR ( expression_statement expression_statement expression ) statement .)


state 348

    (198) iteration_statement -> DO statement WHILE ( expression ) ; .

    }               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IDENTIFIER      reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CASE            reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEFAULT         reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    {               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ;               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    IF              reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SWITCH          reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    WHILE           reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DO              reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    FOR             reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    GOTO            reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    BREAK           reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    RETURN          reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    INC_OP          reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    DEC_OP          reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    SIZEOF          reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    &               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    *               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    +               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    -               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ~               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    !               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    CONSTANT        reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    STRING_LITERAL  reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    (               reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)
    ELSE            reduce using rule 198 (iteration_statement -> DO statement WHILE ( expression ) ; .)


state 349

    (195) selection_statement -> IF ( expression ) statement ELSE statement .

    }               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IDENTIFIER      reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CASE            reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEFAULT         reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    {               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ;               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    IF              reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SWITCH          reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    WHILE           reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DO              reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    FOR             reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    GOTO            reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONTINUE        reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    BREAK           reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    RETURN          reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    INC_OP          reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    DEC_OP          reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    SIZEOF          reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    &               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    *               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    +               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    -               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ~               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    !               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    CONSTANT        reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    STRING_LITERAL  reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    (               reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)
    ELSE            reduce using rule 195 (selection_statement -> IF ( expression ) statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 342 resolved as shift
